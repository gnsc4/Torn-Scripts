;(function ($, window, document, undefined) {
    'use strict';

    var pluginName = 'tornInputMoney';

    /**
     * Plugin object constructor.
     */
    function Plugin(element, options) {
        // References to DOM and jQuery versions of element
        var el = element;
        var $el = $(element);

        $.fn[pluginName].defaults = {
            version: "1.0", // version plugin
            symbol: '$', // symbol for currency
            showSymbolButton: true, // show/hide symbol button (max value)
            errorClass: 'error', // css class for errors
            successClass: 'success', // css class for success
            groupMoneyClass: 'input-money-group', // css class for plugin wrapper
            symbolMoneyClass: 'input-money-symbol', // css class for symbol wrapper
            inputMoneyClass: 'input-money', // css class for input
            inputHiddenMoneyClass: '', // css class for hidden input (for integer value in $_POST)
            buttonElement: $('.torn-btn'), // jQuery element for disabling submit button
            buttonDisabledClass: 'disabled', // css class for disabling submit button
            buttonDisabledAttribute: 'disabled', // attribute for disabling submit button
            moneySourceData: 'data-money', // attribute for get max/limit value
            title: "Click here to add the maximum amount, or use shortcuts like <br /> 5k, 1.5m, max, half, quarter, 1/2, 1/3, 1/4, 25%", // title for symbol button
            strictMode: true,
            ajaxAction: null, // updates data-money attribute if this option contains action link to the controller
            disabled: false, // can be set via html attribute
            disabledAutoCorrect: true,
            allowNegativeNumbers: false,
            skipBlurCheck: false,
            minValue: 'data-minvalue',

            onInit: function() {}, // callback init
            onDestroy: function() {} // callback destroy
        };

        // Extend default options
        options = $.extend({}, $.fn[pluginName].defaults, options);

        var reNumsSign = options.allowNegativeNumbers ? '[-]?' : '';
        // Default rules for autocomplete
        var rules = {
            digit: function(value) {
                var re = new RegExp('^(' + reNumsSign + '[1-9]\\d*)$', 'i');
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);

                return (inputMatch) ? inputMatch[1] : null;
            },
            float: function(value) {
                var re = new RegExp('^(' + reNumsSign + '[1-9]\\d*(?:[,]\\d{3})*)(?:[.]\\d{10})?$', 'i');
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);

                return (inputMatch) ? inputMatch[1] : null;
            },
            all: function(value) {
                var re = /^(all|max){1}$/i;
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);
                var moneySourceData = $el.attr(options.moneySourceData);

                return (inputMatch && moneySourceData) ? moneySourceData : null;
            },
            thousand: function(value) {
                var re = new RegExp('^(' + reNumsSign + '\\d+[.]?(\\d{1,3})?)k$', 'i');
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);

                return (inputMatch) ? Math.round(inputMatch[1] * 1000) : null;
            },
            million: function(value) {
                var re = new RegExp('^(' + reNumsSign + '\\d+[.]?(\\d{1,6})?)m$', 'i');
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);

                return (inputMatch) ? Math.round(inputMatch[1] * 1000000) : null;
            },
            billion: function(value) {
                var re = new RegExp('^(' + reNumsSign + '\\d+[.]?(\\d{1,9})?)b$', 'i');
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);

                return (inputMatch) ? Math.round(inputMatch[1] * 1000000000) : null;
            },
            quarter: function(value) {
                var re = /^(1\/4|quarter){1}$/i;
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);
                var moneySourceData = $el.attr(options.moneySourceData);

                return (inputMatch && moneySourceData) ? Math.round(parseInt(moneySourceData) / 4) : null;
            },
            third: function(value) {
                var re = /^(1\/3){1}$/i;
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);
                var moneySourceData = $el.attr(options.moneySourceData);

                return (inputMatch && moneySourceData) ? Math.round(parseInt(moneySourceData) / 3) : null;
            },
            half: function(value) {
                var re = /^(1\/2|half){1}$/i;
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);
                var moneySourceData = $el.attr(options.moneySourceData);

                return (inputMatch && moneySourceData) ? Math.round(parseInt(moneySourceData) / 2) : null;
            },
            percent: function(value) {
                var re = /^([1-9][0-9]?|100)%$/i;
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);
                var moneySourceData = $el.attr(options.moneySourceData);

                return (inputMatch && moneySourceData) ? Math.round(parseInt(moneySourceData) * inputMatch[1] / 100) : null;
            },
            firstZero: function(value) {
                var re = /^([0])/i;
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);
                var limitAttr = $el.attr(options.moneySourceData);
                var limitValue = limitAttr ? parseInt(limitAttr.replace(/,/g, '')) : null;
                return (inputMatch && limitValue == 0) ? inputMatch[1] : null;
            },
            zero: function(value) {
                var re = /^([0])$/i;
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);
                return (inputMatch && !options.strictMode) ? inputMatch[1] : null;
            },
            fraction: function(value) {
                var re = /^(([1-9])\/([2-9]|10))$/i;
                var inputValue = value || $el.val();
                var inputMatch = re.exec(inputValue);
                var moneySourceData = $el.attr(options.moneySourceData);

                return (inputMatch && moneySourceData && (parseInt(inputMatch[2]) < parseInt(inputMatch[3])))
                    ? Math.round(parseInt(moneySourceData) * inputMatch[2] / inputMatch[3])
                    : null;
            }
        };

        /**
         * Initialize plugin.
         */
        function init() {

            return $el.each(function () {
                var $input = $(this);

                var isDisabled = $input.attr('disabled') || options.disabled;

                $input.attr('disabled', isDisabled);
                $input.attr('data-lpignore', true);

                if (isDisabled) {
                    $input.attr('readonly', true);
                }

                if (options.disabledAutoCorrect) {
                    $input.attr('autocomplete', 'off');
                    $input.attr('autocorrect', 'off');
                    $input.attr('autocapitalize', 'off');
                    $input.attr('spellcheck', 'false');
                }

                var symbolButton = $('<input/>').attr('type', 'button').addClass('wai-btn').attr('aria-label', options.title);
                var symbolWrapElement = $('<span/>').attr('title', options.title).addClass(options.symbolMoneyClass).html(options.symbol).append(symbolButton);
                var groupWrapElement = $('<div/>').addClass(options.groupMoneyClass + (isDisabled ? ' disabled' : ''));
                var parent = $input.wrap(groupWrapElement).parent();
                $input.addClass(options.inputMoneyClass);
                var $hiddenInput = $input.clone();
                $hiddenInput.attr('type', 'hidden');
                $input.after($hiddenInput);
                $hiddenInput.addClass(options.inputHiddenMoneyClass);
                $input.attr('name', null);

                var moneySourceDataValue = $input.attr(options.moneySourceData);

                if (moneySourceDataValue) {
                    $input.attr(options.moneySourceData, moneySourceDataValue.replace(/([,\.])/g, ''));
                    if (options.showSymbolButton) {
                        symbolWrapElement.prependTo(parent);
                    }
                } else {
                    parent.addClass('no-max-value');
                }

                $input.on('input', function(event) {
                    var val = $el.val();
                    updateButtonElementState();
                    updateErrorState();

                    if (val) {
                        var re = new RegExp('(' + reNumsSign + '[0-9,\\.]*)');
                        var matches = re.exec(val);
                        var isNumber = matches && matches.input === matches[0];
                        var intVal = parseInt(val.replace(/,/g, ''));
                        var limitAttr = $el.attr(options.moneySourceData);
                        var limitValue = limitAttr ? parseInt(limitAttr.replace(/,/g, '')) : null;

                        var limitValueIsExceeded = (limitValue && (intVal > limitValue));

                        if (!isNumber || limitValueIsExceeded) {
                            if (limitValueIsExceeded) {
                                updateDataMoney()
                                    .then(formatter)
                            }
                        }
                    } else {
                        $el.closest('.' + options.groupMoneyClass).removeClass(options.successClass);
                        $el.closest('.' + options.groupMoneyClass).removeClass(options.errorClass);
                    }

                    if (val === '0' || val === '') {
                        $el.next().val(val);
                    }

                    formatter();

                    var $groupMoney = $el.closest('.' + options.groupMoneyClass);
                    hook('onAfterChange', {value: $el.val(), error: $groupMoney.hasClass(options.errorClass)});
                    event.preventDefault()

                });

                $input.on('keydown', function(event) {
                    if (isForbiddenKey(event)) {
                        return
                    }
                    $.data($el, 'old_position', getCursorPosition());
                    $.data($el, 'old_length', $el.get(0).value.length);
                });

                $input.on('select', function(event) {
                    if (isForbiddenKey(event)) {
                        return
                    }
                    $.data($el, 'selection_length', getSelectionLength());
                });

                $input
                    .closest('.' + options.groupMoneyClass)
                    .find('.' + options.symbolMoneyClass).on('click', function(event) {
                        if (!isDisabled && $input.attr('readonly') === undefined) {
                            updateDataMoney()
                                .then(function () {
                                    $input.val('max');
                                    formatter();
                                    hook('onAfterMoneyUpdate');
                                });
                        }
                    });

                if ($input.val()) {
                    formatter();
                } else {
                    options.buttonElement && options.buttonElement.addClass(options.buttonDisabledClass);
                    options.buttonElement && options.buttonElement.prop(options.buttonDisabledAttribute, true);
                }

                checkBrowserTabVisibility();
                hook('onInit');
            });
        }

        function setCursorPosition(pos) {
            $el.each(function(index, elem) {
                if (elem.setSelectionRange) {
                    elem.setSelectionRange(pos, pos);
                } else if (elem.createTextRange) {
                    var range = elem.createTextRange();
                    range.collapse(true);
                    range.moveEnd('character', pos);
                    range.moveStart('character', pos);
                    range.select();
                }
            });
        }

        function getInsertionPosition() {
            var offset = $.data($el, 'selection_length') || 0;
            var oldFromEndPosition = $.data($el, 'old_length') - $.data($el, 'old_position');

            return nonNegative($el.get(0).value.length - oldFromEndPosition + offset);
        }
        
        function nonNegative(val) {
            return val < 0 ? 0 : val
        }

        function updateButtonElementState() {
            if (options.buttonElement) {
                if ($el.val()) {
                    options.buttonElement.removeClass(options.buttonDisabledClass);
                    options.buttonElement.prop(options.buttonDisabledAttribute, false);
                } else {
                    options.buttonElement.addClass(options.buttonDisabledClass);
                    options.buttonElement.attr(options.buttonDisabledAttribute, true);
                }
            }
        }

        function updateErrorState() {
            var $groupMoney = $el.closest('.' + options.groupMoneyClass);

            if ($el.val()) {
                $groupMoney.removeClass(options.errorClass);
            }
        }

        function getCursorPosition() {
            var pos = 0;
            var elem = $el.get(0);
            // IE Support
            if (document.selection) {
                elem.focus();
                var Sel = document.selection.createRange();
                var SelLength = document.selection.createRange().text.length;
                Sel.moveStart('character', -elem.value.length);
                pos = Sel.text.length - SelLength;
            }
            // Firefox support
            else if (elem.selectionStart || elem.selectionStart == '0')
                pos = elem.selectionStart;
            return pos;
        }

        function getSelectionLength() {
            var start = 0, end = 0, normalizedValue, range,
                textInputRange, len, endRange;

            if (typeof el.selectionStart == "number" && typeof el.selectionEnd == "number") {
                start = el.selectionStart;
                end = el.selectionEnd;
            } else {
                range = document.selection.createRange();

                if (range && range.parentElement() == el) {
                    len = el.value.length;
                    normalizedValue = el.value.replace(/\r\n/g, "\n");

                    // Create a working TextRange that lives only in the input
                    textInputRange = el.createTextRange();
                    textInputRange.moveToBookmark(range.getBookmark());

                    // Check if the start and end of the selection are at the very end
                    // of the input, since moveStart/moveEnd doesn't return what we want
                    // in those cases
                    endRange = el.createTextRange();
                    endRange.collapse(false);

                    if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                        start = end = len;
                    } else {
                        start = -textInputRange.moveStart("character", -len);
                        start += normalizedValue.slice(0, start).split("\n").length - 1;

                        if (textInputRange.compareEndPoints("EndToEnd", endRange) > -1) {
                            end = len;
                        } else {
                            end = -textInputRange.moveEnd("character", -len);
                            end += normalizedValue.slice(0, end).split("\n").length - 1;
                        }
                    }
                }
            }

            return end - start;
        }

        function isForbiddenKey(event) {
            return event.which == 65 ||  event.which == 17 && !event.ctrlKey || (event.which == 91 || event.which == 224) && !event.metaKey
        }

        function checkBrowserTabVisibility() {
            $(window).focus(function(){ });
        }

        function updateDataMoney() {
            if (options.ajaxAction) {
                return $.ajax({
                    method: "POST",
                    url: addRFC(options.ajaxAction),
                    success: function(data) {
                        var formattedData = hook('onMoneyUpdate', data) || data;
                        $el.attr(options.moneySourceData, formattedData);
                        $el.next().filter('input[type="hidden"].' + options.inputMoneyClass).attr(options.moneySourceData, formattedData);
                    }
                });
            }
            return Promise.resolve()
        }

        /**
         * Get/set a plugin option.
         */
        function option (key, val) {
            if (val) {
                options[key] = val;
            } else {
                return options[key];
            }
        }


        /**
         * Destroy plugin.
         * Usage: $('.el').tornInputMoney('destroy');
         */
        function destroy() {
            $el.each(function() {
                var el = this;
                var $el = $(this);

                var $clonedEl = $el.clone();
                var $parent = $el.parent();
                $clonedEl.removeClass(options.inputMoneyClass);
                $parent.before($clonedEl);
                $el.parent().remove();

                hook('onDestroy');
                $el.removeData('plugin_' + pluginName);
            });
        }

        /**
         * Callback hooks.
         * Usage: In the defaults object specify a callback function:
         * hookName: function() {}
         * Then somewhere in the plugin trigger the callback:
         * hook('hookName');
         */
        function hook(hookName, args) {
            var arg = args || {};
            if (options[hookName] !== undefined) {
                return options[hookName].call(el, arg);
            }
        }

        /**
         * Autocomplete method
         */
        function formatter() {
            var result;
            var inputValue = $el.val().replace(/,/g, '');
            var limitAttr = $el.attr(options.moneySourceData);
            var limitValue = limitAttr ? parseFloat(limitAttr.replace(/,/g, '')) : null;

            $.each(rules, function(rulename, method) {
                inputValue = $.trim(inputValue);
                result = method.call(this, inputValue);
                if (result || result == 0) {
                    var intValue = parseFloat(result.toString().replace(/,/g, ''));
                    if ((limitValue || limitValue == 0) && intValue >= limitValue) {
                        intValue = limitValue;
                    }
                    inputValue = intValue.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1,');
                    $el.next().val(intValue);
                    return false;
                }
            });

            if ($el.val() != inputValue) {
                var input = $el.get(0);
                var nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;
                nativeInputValueSetter.call(input, inputValue);
                // it appears that preload js is overriding
                // the global Event and that will make dispatch fail
                try {
                    input.dispatchEvent(new Event('input', {bubbles: true}));
                } catch (e) {
                    console.error('Couldn\'t dispatch the event' )
                }

                setCursorPosition(getInsertionPosition());
                $.data($el, 'selection_length', 0);
            }

            var $groupMoney = $el.closest('.' + options.groupMoneyClass).removeClass(options.successClass).removeClass(options.errorClass);
            var $button = options.buttonElement;

            var minLimitAttr = $el.attr(options.minValue);
            var minValue = minLimitAttr ? parseFloat(minLimitAttr.replace(/,/g, '')) : null;
            const isLowerThenMinValue = (minValue || minValue == 0) && inputValue < minValue
                
            if (result && (result != 0 || !options.strictMode) && !isLowerThenMinValue) {
                $groupMoney.addClass(options.successClass);
                $button && $button.removeClass(options.buttonDisabledClass);
                $button && $button.prop(options.buttonDisabledAttribute, false);
            }
            else if (inputValue.length > 0) {
                $groupMoney.addClass(options.errorClass);
                $button && $button.addClass(options.buttonDisabledClass);
                $button && $button.prop(options.buttonDisabledAttribute, true);
            }
        }

        /**
         * Method for adding rules
         */
        function addRules(nameRules, actionRules) {
            var customRules = {};
            var $el = $el;
            customRules[nameRules] = actionRules;

            rules = $.extend(rules, customRules);
        }

        // Initialize the plugin instance.
        init();

        // Expose methods of Plugin we wish to be public.
        return {
            option: option,
            destroy: destroy,
            format: formatter,
            addRules: addRules
        };
    }

    /**
     * Plugin definition.
     */
    $.fn[pluginName] = function(options) {
        if (typeof arguments[0] === 'string') {
            var methodName = arguments[0];
            var args = Array.prototype.slice.call(arguments, 1);
            var returnVal;
            this.each(function() {
                if ($.data(this, 'plugin_' + pluginName) && typeof $.data(this, 'plugin_' + pluginName)[methodName] === 'function') {
                    returnVal = $.data(this, 'plugin_' + pluginName)[methodName].apply(this, args);
                } else {
                    throw new Error('Method ' +  methodName + ' does not exist on jQuery.' + pluginName);
                }
            });
            if (returnVal !== undefined){
                return returnVal;
            } else {
                return this;
            }
        } else if (typeof options === "object" || !options) {
            return this.each(function() {
                if (!$.data(this, 'plugin_' + pluginName)) {
                    $.data(this, 'plugin_' + pluginName, new Plugin(this, options));
                }
            });
        }
    };

})(jQuery, window, document);
