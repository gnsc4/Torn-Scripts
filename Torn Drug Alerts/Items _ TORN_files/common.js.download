(function() {
    var cookieName = 'darkModeEnabled';
    if ($.cookie(cookieName)) {
        return;
    }

    var isDarkMode = Boolean(window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);
    setCookie(cookieName, isDarkMode.toString(), 3650, true);
    if (isDarkMode) {
        $(document).ready(function () {
            document.body.classList.add('dark-mode');
        });
    }
})();

var EDITOR_CONTENT_PREFIX = 'EditorContent-';

var tutorialSwitchInited = false;

(function() {
    window.console.dev = function(){
        if (location.host.includes('dev-www') || location.host.includes('localhost')) {
            var args = [];

            for (var i = 0; i < arguments.length; i++) {
                args.push(arguments[i]);
            }
            console.log.apply(window, args);
        }
    }
})()

function getLinkHash(link) {
    return link.replace(/.*#\!/g, '');
}

function initOverlay() {
}

function updateOverlayPosition() {
}

function isDesktop() {
    var mobile = (/iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase()));
    return !mobile;
}

function isTouchDevice() {
    return 'ontouchstart' in window;
}

function getClickEventType() {
    return (document.ontouchstart !== null) ? 'click' : 'touchstart';
}

function isNumber(value) {
    return !isNaN(parseFloat(value)) && isFinite(value);
}

function isIntNumber(value) {
    return isNumber(value) && (value % 1 == 0);
}

function isPrettyNumber(value, useDot) {
    var regex = (useDot == undefined || useDot == true) ? /^(\d+|\d{1,3}(,\d{3})*)(\.\d+)?$/ : /^(\d+|\d{1,3}(,\d{3})*)$/;

    return regex.test(value);
}

function parsePrettyNumberToFloat(value) {
    return parseFloat(value.replace(',', ''));
}

function parsePrettyNumberToInt(value) {
    return parseInt(value.toString().replace(/,/g, ''));
}

var MOBILE = 'mobile';
var TABLET = 'tablet';
var DESKTOP = 'desktop';

var minMobileSize = 320;
var maxTabletSize = 784;
var minTabletSize = 386;
var minDesktopSize = 785;
var maxTabletSizeWithoutSidebar = 1000;
var minTabletSizeWithoutSidebar = 600;
var minDesktopSizeWithoutSidebar = 1001;

function isPageWithoutSidebar() {
    return $('body').hasClass('without-sidebar');
}

function getMaxTabletSize() {
    return isPageWithoutSidebar() ? maxTabletSizeWithoutSidebar : maxTabletSize;
}

function getMinTabletSize() {
    return isPageWithoutSidebar() ? minTabletSizeWithoutSidebar : minTabletSize;
}

function getMinDesktopSize() {
    return isPageWithoutSidebar() ? minDesktopSizeWithoutSidebar : minDesktopSize;
}

function isDesktopMedia() {
    return getMediaQueryName() == DESKTOP;
}

function isTabletMedia() {
    return getMediaQueryName() == TABLET;
}

function isMobileMedia() {
    return getMediaQueryName() == MOBILE;
}

function aboveMaxTabletSize(useStrict) {
    var strict = useStrict || false;

    return (strict) ? getBrowserWidth() > getMaxTabletSize() : getBrowserWidth() >= getMaxTabletSize();
}

function belowMaxTabletSize(useStrict) {
    var strict = useStrict || false;

    return (strict) ? getBrowserWidth() < getMaxTabletSize() : getBrowserWidth() <= getMaxTabletSize();
}

function aboveMinTabletSize(useStrict) {
    var strict = useStrict || false;

    return (strict) ? getBrowserWidth() > getMinTabletSize() : getBrowserWidth() >= getMinTabletSize();
}

function belowMinTabletSize(useStrict) {
    var strict = useStrict || false;

    return (strict) ? getBrowserWidth() < getMinTabletSize() : getBrowserWidth() <= getMaxTabletSize();
}


function getMediaQueryName() {

    return window.getComputedStyle(document.querySelector('body'), ':before').content.replace(/"/g, '');
}

function getMediaQuery(isNotForMediaChecking) {
    var media = getMediaQueryName();
    var result = getMinDesktopSize();

    switch (media) {
        case TABLET:
            result = getMaxTabletSize();
            break;
        case MOBILE:
            result = getMinTabletSize();
            break;
    }

    if (!$('body').hasClass('r') && !isNotForMediaChecking) {
        result = 1200;
    }

    return result;
}

function getBrowserWidth(isNotForMediaChecking) {

    return getMediaQuery(isNotForMediaChecking);
}

function getBrowserWidthOld(isNotForMediaChecking) {
    // If you need to get an accurate browser width you should call getBrowserWidth with parameter 'true' (getBrowserWidth(true))
    var browserWidth = ($.browser.webkit) ? document.body.clientWidth :
        ($.browser.msie && !window.innerWidth) ? document.body.clientWidth : window.innerWidth;

    if (screen.width < browserWidth) {
        browserWidth = screen.width;
    }

    if (!$('body').hasClass('r') && !isNotForMediaChecking) {
        browserWidth = 1200;
    }

    return browserWidth;
}

function getUrlParam(name) {
    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);

    return results ? results[1] : null;
}

function isolatedNativeScroll(selector) {
    $('body').on('mousewheel DOMMouseScroll', selector, function (e) {
        var originalEvent = e.originalEvent;
        var delta = originalEvent.wheelDelta || -originalEvent.detail;
        this.scrollTop += ( delta < 0 ? 1 : -1 );
        e.preventDefault();
    });

    //$('body').on('wheel', selector, function (ev) {
    //    var $this = $(this),
    //      scrollTop = this.scrollTop,
    //      scrollHeight = this.scrollHeight,
    //      height = $this.height(),
    //      delta = Math.sign(ev.originalEvent.deltaY),
    //      up = delta > 0;
    //
    //    var prevent = function() {
    //        ev.stopPropagation();
    //        ev.preventDefault();
    //        ev.returnValue = false;
    //        return false;
    //    }
    //
    //    if (!up && -delta > scrollHeight - height - scrollTop) {
    //        $this.scrollTop(scrollHeight);
    //        return prevent();
    //    } else if (up && delta > scrollTop) {
    //        $this.scrollTop(0);
    //        return prevent();
    //    }
    //});
}

/*
 * Hack to destroy slider.
 * */
function flexdestroy(selector) {
    $(selector).each(function () {
        var el = $(this);
        var elClean = el.clone();

        var canvasElClean = elClean.find('canvas');

        el.find('canvas').each(function (index) {
            if (canvasElClean.eq(index)) {
                canvasElClean.eq(index)[0].getContext('2d').drawImage(this, 0, 0);
            }
        });

        elClean.find('.flex-viewport').children().unwrap();
        elClean
            .find('.clone, .flex-direction-nav, .flex-control-nav')
            .remove()
            .end()
            .find('*').removeAttr('style').removeClass(function (index, css) {
            return (css.match(/\bflex\S+/g) || []).join(' ');
        });

        elClean.insertBefore(el);
        el.remove();
    });
}

function sortableScrollHack(event, ui) {

    var $window = $(window);
    var windowHeight = $window.height();

    var currentScrollTop = $window.scrollTop(),
        topHelper = ui.position.top,
        delta = topHelper - currentScrollTop;

    var y = event.clientY,
        minDiff = 100,
        scrollDeltaCoef = 0.8;

    if (y < minDiff || windowHeight - y < minDiff) {
        setTimeout(function() {
            $window.scrollTop((currentScrollTop + delta * scrollDeltaCoef));
        }, 5);
    }

}

function sortingItemsListAndSavingPosition(listClass, cookieName, handleClass) {
    if (listClass === undefined)
        listClass = 'sortable-list';
    var $list = $('.' + listClass);
    var handle = '.draggable-wrap' || handleClass;
    if (cookieName === undefined)
        cookieName = $list.attr('cookie-name');

    function setItemsListCookie() {
        if(!cookieName)
            return;

        var $listRows = $('.' + listClass + ' > li');
        var $listData = {items: []};
        $listRows.each(function () {
            $listData.items.push({id: $(this).attr('id').replace('#item', '')});
        });

        if (!$.cookie(cookieName)) {
            $.cookie(cookieName, JSON.stringify($listData), {expires: 18262});
        } else {
            $.cookie(cookieName, JSON.stringify($listData));
        }
    }

    function getItemsListCookie() {
        if(!cookieName)
            return;

        if ($.cookie(cookieName)) {
            var cookies = $.parseJSON($.cookie(cookieName));
            if (cookies) {
                $(cookies.items).each(function (index) {
                    var item = cookies.items[index];
                    $('#item' + item.id).appendTo($list);
                });
            }
        }
    }

    $list.sortable({
        helper: 'clone',
        containment: "parent",
        tolerance: "pointer",
        handle: handle,
        scroll: true,
        stop: function (event, ui) {
            setItemsListCookie();
        },
        sort: function(event, ui) {
            sortableScrollHack(event, ui);
        }
    });

    getItemsListCookie();
}

function clearTinyMCEContent(selector, textAreaId) {
    selector.click(function () {
        tinymce.get(textAreaId).setContent('');
    });
}

function toggleTopPageLinks() {
    $('.links-top-wrap.activated').live('click', function () {
        var $el = $(this);
        $el.toggleClass('arrow-act');
    });
}

window.sidebarIconsLiveTime = 0;
setInterval(function () {
    window.sidebarIconsLiveTime++;
}, 1000);

function checkTypeInfoDialogMessage(height) {
    var isInitForTouch = false;
    height = height || 100;

    var checkHeight = function() {
        var $info = $('.info-dialog-msg');
        $info.removeClass('dialog-type-2');
        if ($info.height() > height) {
            $info.addClass('dialog-type-2');
        }
    }

    checkHeight();
    $(window).trigger('resize');

    $(window).resize(function () {
        if (belowMaxTabletSize && !isInitForTouch) {
            isInitForTouch = true;
            checkHeight();
        }

        if (aboveMaxTabletSize(true) && isInitForTouch) {
            isInitForTouch = false;
            $('.info-dialog-msg').removeClass('dialog-type-2');
        }
    });
}

function initializeTooltip(selector, additionalClass, options) {
    var defaults = {
        close: resetTooltip,
        track: false,
        tooltipClass: additionalClass,
        hide: false,
        position: {
            my: "center bottom-10",
            at: "center top",
            using: function (position, feedback) {
                $(this).css(position);
                var $arrow = $('.tooltip-arrow');
                $arrow
                    .removeClass('top')
                    .removeClass('bottom')
                    .addClass('left')
                    .addClass(feedback.vertical)
                    .addClass(feedback.horizontal);
            }
        },
        content: function () {
            var $el = $(this),
                symbolLimitAttr = $el.attr('tooltip-symbol-limit'),
                tooltipSymbolLimit = symbolLimitAttr ? parseInt(symbolLimitAttr) : 500,
                elTitleText = $el.attr('title'),
                tooltipContent;

            if (!elTitleText) {
                return false
            }

            if ($(this).attr('type') == 'application/x-shockwave-flash') {
                return false;
            }

            tooltipContent = elTitleText.length > tooltipSymbolLimit
                ? elTitleText.substring(0, tooltipSymbolLimit) + '...'
                : elTitleText;

            tooltipContent = tooltipContent.replace(/\\*'/g, "'");

            return tooltipContent + "<div class='tooltip-arrow'></div>";
        },
        open: showTooltipData
    }

    function showTooltipData(event, ui) {
        /* Remove tooltip for tablet/mobile views and only for user's honorbars and faction icons */
        if (getBrowserWidth() < getMaxTabletSize() && $(event.toElement).closest('.user').length) {
            $(ui.tooltip).addClass('to-hide');
        }

        var $tooltip = $(ui.tooltip),
            $timer = $tooltip.find('.timer');
        var layout = '',
            flag = false;
        if ($timer.attr('data-layout') !== undefined) {
            layout = $timer.attr('data-layout');
            flag = true;
        } else {
            layout = '{d<}{dnn} days, {d>}{h<}{hnn} hours, {h>}{m<}{mnn} minutes and {m>}{snn} seconds';
        }

        if ($timer.length > 0) {
            $timer.countdown({
                until: ($timer.attr('data-time') - window.sidebarIconsLiveTime).toString(),
                layout: layout,
                padZeroes: true,
                //compact: true,
                format: flag ? 'HMS' : undefined,
                // onExpiry: refreshTopOfSidebar
            });
        }
    }

    function resetTooltip() {
        var tooltip = $(selector),
            timer = tooltip.find('.timer');

        try {
            timer.countdown('destroy');
        } catch (err) {
        }

        try {
            tooltip.tooltip("destroy");
        } catch (err) {
        }

        createTooltip();
    }

    function createTooltip() {
        try {
            $(selector).tooltip(Object.assign({}, defaults, options));
        } catch (err) {
        }
    }

    resetTooltip();
}

function checkTopPageLinksState(selector) {
    if (selector.hasClass('desktop')
        || (selector.hasClass('tablet') && getBrowserWidth() <= getMaxTabletSize())
        || (selector.hasClass('mobile') && getBrowserWidth() < getMinTabletSize())) {
        selector.addClass('activated').siblings('.tutorial-switcher').addClass('tpl-activated');
    } else {
        selector.removeClass('activated').siblings('.tutorial-switcher').removeClass('tpl-activated');
    }
}


function checkTopPageContentTitleLinks(container, limit) {
    if (!container) {
        container = $('.content-wrapper')
    }

    var contentTitle = container.find('.content-title');
    var topLinksListWrapper = contentTitle.find('.links-top-wrap');
    var topLinksList = topLinksListWrapper.find('.content-title-links>a');

    if (topLinksList.length > limit) {
        checkTopPageLinksState(topLinksListWrapper);
        if(topLinksList.filter('.dd-important').length) {
            var linksClone =topLinksListWrapper.clone().removeClass('activated').addClass('dd-important-wrapper');

            linksClone.find('.content-title-links a:not(.dd-important)').remove()

            topLinksListWrapper.after(linksClone);
            topLinksListWrapper.addClass('dd-filter-important')
        }
    }

}


function initializeTopPageLinks() {
    checkTopPageLinksState($('.content-title .links-top-wrap'));
    toggleTopPageLinks();
}

function initializeAccordion(selector, options) {
    var data = options || {};
    data.active = ( data.active == undefined || data.active == -1 ) ? true : data.active;
    selector.accordion({
        active: data.active,
        animated: false,
        collapsible: true,
        heightStyle: "content",
        beforeActivate: data.beforeActivate,
        activate: data.activate,
        header: data.header
    });
}

function changeNumberWithComma(selector, parent, valueContainer, valueToAdd) {
    var $val = selector.parents(parent).find(valueContainer);
    var value = $val.text().replace(/,/g, "");
    value = parseInt(value) + parseInt(valueToAdd);
    (value < 0) ? value = 0 : value;
    $val.text(value.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
}

function toNumberFormat(str) {
    var value = str.toString().replace(/,/g, "");

    return value.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
}

function toShortNumberFormat(str) {
    var quadrillion = 1000000000000000, trillion = 1000000000000, billion = 1000000000, million = 1000000,
        thousand = 1000,
        moneyPrefix = "",
        value = str.toString().replace(/,/g, "");
    value = parseInt(value);
    if (value >= quadrillion) {
        value = Math.round(value / quadrillion * 10) / 10;
        moneyPrefix = 'P';
    } else if (value >= trillion) {
        value = Math.round(value / trillion * 10) / 10;
        moneyPrefix = 'T';
    } else if (value >= billion) {
        value = Math.round(value / billion * 10) / 10;
        moneyPrefix = 'B';
    } else if (value >= million) {
        value = Math.round(value / million * 10) / 10;
        moneyPrefix = 'M';
    } else if (value >= thousand) {
        value = Math.round(value / thousand * 10) / 10;

        if (value === 1000) {
            return '1m';
        }

        moneyPrefix = 'k';
    }

    return value + moneyPrefix;
}

function parseShortNumberFormat(number) {
    var lastChar = number.slice(-1);
    var value = parseInt(number);
    var thousand = 1000, million = 1000000, billion = 1000000000;
    if (lastChar === 'k') {
        return value * thousand;
    }
    if (lastChar === 'm') {
        return value * million;
    }
    if (lastChar === 'b') {
        return value * billion;
    }
    return value;
}

function iconSwitcher(parent, iconType, postMethod) {
    $.get('/images/v2/svg_icons/top_page_links/' + iconType + '.svg', function(payload) {
        function svgIconParser(node) {
            if (typeof(XMLSerializer) !== 'undefined') {
                var serializer = new XMLSerializer();
                return serializer.serializeToString(node);
            } else if (node.xml) {
                return node.xml;
            }
            return '';
        };

        parent.children('svg').remove();
        parent.append(svgIconParser(payload));
    });

    var tutorialID = parent && parent.parent() && parent.parent().attr('id') || 0

    $.post("updateTutorials.php", {tutorialID: tutorialID, status: postMethod}, function() {
        if (postMethod === 'off') {
            parent.removeClass('tutorial-icon-hide').addClass('tutorial-icon-show');
        } else if (postMethod === 'on') {
            parent.removeClass('tutorial-icon-show').addClass('tutorial-icon-hide');
        }
    });
}

function tutorialSwitcher() {
    if (!tutorialSwitchInited) {
        tutorialSwitchInited = true;
        $('body').on('click', '.tutorial-switcher', function () {
            if ($(this).attr('data-href') != undefined) {
                window.location = $(this).attr('data-href');
            } else {
                $('.tutorial-cont').toggle();
                var $el = $('.tutorial-icon-svg');
                var $tutorialSwitcher = $el.closest('.tutorial-switcher');

                if ($el.hasClass('tutorial-icon-show')) {
                    iconSwitcher($el, 'tutorial-hide', 'on');
                    $tutorialSwitcher.attr('aria-label', 'Hide Tutorial');
                    $('.tutorial-desc').focus();
                } else {
                    iconSwitcher($el, 'tutorial-icon', 'off');
                    $tutorialSwitcher.attr('aria-label', 'Show Tutorial');
                }
            }
        });
    }

}

function loadCheckBoxEvents(selectorWrapper) {
    $(selectorWrapper + ' div.prettycheckbox a,'
        + selectorWrapper + ' div.prettyradio a,'
        + selectorWrapper + ' div.prettycheckbox label,'
        + selectorWrapper + ' div.prettyradio label').on('touchstart click', function (e) {

        e.preventDefault();

        var clickedParent = $(this).closest('.clearfix');
        var input = clickedParent.find('input');
        var fakeCheckable = clickedParent.find('a');

        if (input.attr('type') === 'radio') {
            $('input[name=' + input.attr('name') + ']').each(function (index, el) {
                $(el).removeAttr('checked').parent().find('a').removeClass('checked');
            });
        }

        if (input.attr('checked') !== undefined) {
            input.removeAttr('checked');
        } else {
            input.attr('checked', 'checked').change();
        }
        fakeCheckable.toggleClass('checked');
    });

    $('div.prettycheckbox a, div.prettyradio a').on('keypress', function (e) {
        $(this).click();
        e.preventDefault();
    });
}

function ajaxAction(thisEl, parents, messageContainerClassName, onAjaxCompleteFunc) {
    // onAjaxCompleteFunc optional parameter
    if (typeof onAjaxCompleteFunc === 'undefined')
        onAjaxCompleteFunc = function () {
        };
    var $el = $(thisEl);
    var $parent = $el.parents(parents);
    var selectorHref = window.location.protocol + '//' + window.location.hostname + '/' + $el.attr('href');
    var messagesContainer = $parent.find(messageContainerClassName);

    messagesContainer.find('.ajax-preloader').remove();
    $parent.find('.ajax-action').remove();
    messagesContainer.append('<span class="ajax-preloader"></span>');

    $.ajax({
        url: addRFC(selectorHref),
        dataType: "text",
        success: function (data) {
            if (!checkPageStatus(data))
                return;
            try {
                var data = JSON.parse(data),
                    html = '';
                    //html = '<div class="ajax-action">' + data.msg + '</div>';
                if(data.msg) html = '<div class="ajax-action">' + data.msg + '</div>';
                if(data.error) html = '<div class="ajax-action">' + data.text + '</div>';
                messagesContainer.html("");
                messagesContainer.append(html);
                messagesContainer.parents('.info-msg-cont').removeClass("green red blue").addClass(data.color);
                messagesContainer.parents('.info-msg-cont').attr('tabindex', 0);
            } catch (e) {
                data = '<div class="ajax-action">' + data + '</div>';
                messagesContainer.html("");
                messagesContainer.append(data);
            }
        },
        error: onAjaxError,
        complete: function (data) {
            onAjaxCompleteFunc(data);
        }
    });
}

function ajaxWrapper(request_options, infobox_options) {
    if (infobox_options) {
        var io = infobox_options;
        io.isTopDelimiterRequired = (typeof io.isTopDelimiterRequired === 'undefined' ? true : io.isTopDelimiterRequired);
        io.isBottomDelimiterRequired = (typeof io.isBottomDelimiterRequired === 'undefined' ? false : io.isBottomDelimiterRequired);
        informationMessageTemplateIn(
            io.elementIn,
            io.isTopDelimiterRequired,
            io.isBottomDelimiterRequired,
            io.color ? io.color : "");
            io.elementIn.find('.info-msg-cont .msg').html('<span class="ajax-preloader"></span>');
    }
    var r = $.ajax({
        url: addRFC(request_options.url),
        dataType: request_options.dataType ? request_options.dataType : "text",
        type: request_options.type,
        timeout: request_options.timeout,
        processData: request_options.processData != undefined ? request_options.processData : undefined,
        contentType: request_options.contentType != undefined ? request_options.contentType : undefined,
        cache: request_options.cache != undefined ? request_options.cache : undefined,
        headers: request_options.headers != undefined ? request_options.headers : undefined,
        data: request_options.data,
        async: request_options.async != undefined ? request_options.async : true,
        success: function (resp) {
            if (!checkPageStatus(resp))
                return;

            if (request_options.oncomplete)
                request_options.oncomplete({responseText: resp});

            if (infobox_options) {
                var io = infobox_options,
                    text = "";

                try {
                    var responseData = JSON.parse(resp);
                    io.color = responseData.color || "";
                    text = responseData.msg;
                } catch (e) {
                    text = resp;
                }
                if (responseData.success === false) {
                    io.color = "red";
                    text = responseData.error || responseData.text || responseData.msg;
                }

                informationMessageTemplateIn(io.elementIn, false, false, io.color ? io.color : "");

                var data = '<div class="ajax-action">' + text + '</div>';
                io.elementIn.find('.info-msg-cont .msg').html(data);
            }

            if (request_options.onsuccess)
                request_options.onsuccess(resp);
        },
        error: function (resp) {
            if (typeof request_options.onerror === 'function') {
                request_options.onerror.call(this, resp);
            }
            if (infobox_options) {
                var data = '<div class="ajax-action">Request error. Please try again.</div>',
                    $msg = io.elementIn.find('.info-msg-cont .msg');
                $msg.html(data);
                $msg.parents(".info-msg-cont").removeClass("green blue").addClass("red");
            }
            onAjaxError.apply(this, arguments);
        }
    });

    return r;
}

function getClassSelector(_class) {
    return "." + _class.trim().split(" ").join('.');
}

function formAjaxAction($form, containerAppendAfter, isTopDelimiterRequired, isBottomDelimiterRequired, color) {
    var $formActionLink = window.location.protocol + '//' + window.location.hostname + '/' + $form.attr('action');

    $.ajax({
        type: "POST",
        url: addRFC($formActionLink),
        data: $form.serialize(),
        success: function (data) {
            if (!checkPageStatus(data))
                return;
            $('.ajax-action').remove();
            informationMessageTemplate(containerAppendAfter, isTopDelimiterRequired, isBottomDelimiterRequired, color);
            data = '<div class="ajax-action">' + data + '</div>';
            $('.info-msg-cont .msg').append(data);
        },
        error: /*function() {
         informationMessageTemplate(containerAppendAfter, isTopDelimiterRequired, isBottomDelimiterRequired, color);
         var data = '<div class="ajax-action">Request error. Please try again.</div>';
         $('.info-msg-cont .msg').append(data);
         }*/ onAjaxError
    });
}

var animateProgressOverfullTotal = 3;

function animateProgressOverfull(el) {
    var $el = $(el),
        animCount = parseInt($el.attr('animCount') || 0);
    $el.css('opacity', 0.2);
    $el.animate({
        opacity: 1
    }, {
        duration: 500,
        complete: function () {
            $(this).animate({
                opacity: 0.2
            }, {
                duration: 500,
                complete: function () {
                    if (animateProgressOverfullTotal > animCount) {
                        $el.attr('animCount', animCount + 1);
                        animateProgressOverfull(el);
                    } else {
                        $el.closest('.overfull').removeClass('overfull');
                        $el.css('opacity', 1);
                        $el.removeAttr('animCount');
                    }
                }
            });
        }
    });
}

var animateProgressTickEndTotal = 10;

function animateProgress(el) {
    $(el).animate({
        opacity: 1
    }, {
        duration: 500,
        complete: function () {
            $(this).animate({
                opacity: 0
            }, {
                duration: 500,
                complete: function () {
                    var $barStatus = $(this).closest('.energy-info').find('.bar-status');
                    if (parseInt($barStatus.attr('data-tick')) < parseInt($barStatus.attr('data-until')) + animateProgressTickEndTotal) {
                        animateProgress(el);
                    }
                }
            });
        }
    });
}

function checkProgressOverfull(isRefresh) {
    var $energyInfo = $('.menu-info .energy-info'),
        isStatRefreshed = isRefresh || false,
        statBars = getStatBarsCookie();
    $energyInfo.each(function () {
        var $el = $(this),
            $count = $el.find('.count'),
            countOld = parseInt(statBars[$el.attr('id')]),
            countCurrent = parseInt($count.attr('data-current')),
            countTotal = parseInt($count.attr('data-total')),
            $barStatus = $el.find('.bar-status');


        if (countOld > 0 && ((!isStatRefreshed && countTotal == countCurrent && countTotal > countOld) || (isStatRefreshed && countOld < countCurrent && countTotal < countCurrent))) {
            $el.find('.line').addClass('overfull');
            statBars[$el.attr('id')] = 0;
        }

        if (countOld > 0 && (countTotal > countCurrent && countCurrent > countOld)) {
            $barStatus.attr('data-tick', parseInt($barStatus.attr('data-until')));
            var $tickEnd = $el.find('.tick-end');
            $tickEnd.show();
            animateProgress($tickEnd);
        }

        animateProgressOverfull($el.find('.overfull .progress-line-timer'));
    });

    setStatBarsCookie(statBars);
}

function setStatBarsCookie(data) {
    var statBars = data || {
        energy: 0,
        nerve: 0,
        happy: 0,
        life: 0,
        chain: 0
    };

    if (!$.cookie('statBars')) {
        $.cookie('statBars', JSON.stringify(statBars), {expires: 30});
    } else {
        $.cookie('statBars', JSON.stringify(statBars));
    }
}

function getStatBarsCookie() {
    var statBars = $.parseJSON($.cookie().statBars);
    if (statBars) {
        return statBars;
    } else {
        return false;
    }
}

function refreshTopOfSidebar() {

}

function ajax_data_loader(page, start, limit, order, orderByName, handlebars_tpl, handlebars_wrap) {

    var $handlebars_wrap = $('#' + handlebars_wrap);

    var loader = $('<img class="ajax-loader">');
    loader.attr({src: '/images/v2/main/ajax_loader_tpl.gif'});
    loader.css({position: 'absolute'});

    var loaderHalfHeight = 16;
    var loaderHalfWidth = 16;

    function handlebarsInit(data) {
        //var source = $('#' + handlebars_tpl).html();
        //var template = Handlebars.compile(source);
        var template = Handlebars.templates[handlebars_tpl];
        $handlebars_wrap.html(template(data));

        $handlebars_wrap.animate({
            height: $handlebars_wrap.children(':first').height()
        });

        var $paginaton = $('.pagination');

        $paginaton.find('a').click(function (event) {
            event.preventDefault();

            var href = $(this).attr('href');
            var re = new RegExp("start=(\\d+)", "g");
            var startHref = re.exec(href);

            if (typeof startHref[1] !== "undefined" && startHref !== null) {
                start = startHref[1];
                ajax_data_loader(page, start, limit, order, orderByName, handlebars_tpl, handlebars_wrap);
            }
        });

        loader.remove();
    }

    $.ajax({
        url: "/" + page + '.php',
        data: {start: start, limit: limit, order: order, orderByName: orderByName},
        dataType: "json",
        type: "GET",
        beforeSend: function () {

            if ($handlebars_wrap.height() !== 0) {
                $handlebars_wrap.css({height: $handlebars_wrap.height()});
            }

            var loaderPositionTop = ($handlebars_wrap.height() / 2 - loaderHalfHeight) + 'px';
            var loaderPositionLeft = ($handlebars_wrap.width() / 2 - loaderHalfWidth) + 'px';

            loader.css({top: loaderPositionTop, left: loaderPositionLeft});
            $handlebars_wrap.append(loader);
        },
        success: function (data) {
            if (!checkPageStatus(data))
                return;
            handlebarsInit(data);
        },
        error: function (data) {
            data.message = 'Request error. Please try again.';
            handlebarsInit(data);
        }
    });

    return false;
}

/**
 * @deprecated - use native css scrollbars
 */
function hideScrollbar(containerClass) {
    $('.' + containerClass + ' .l').hide();
    $('.' + containerClass + ' .r').hide();
    $('.' + containerClass + ' .viewport').hide();
    $('.' + containerClass + ' .scrollbar').hide();
}

function initiateNativeMobileDropList(selector, parent) {
    var selectorParent = parent || '.select-wrap';
    var iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
    if (isTouchDevice() && !iOS || isOperaMini()) {
        var classes = isOperaMini() ? 'touched om' : 'touched';
        selector.closest(selectorParent).addClass(classes);
        selector.each(function () {
            $(this).selectmenu();
        });
    }
}

/**
 * @deprecated - use initDropdown instead of this
 */
function initializeDropdown(selectOption, containerClass, width, scrollHeight, sizethumb, changeHandler, allowMobileDropdown) {
    if (!isTouchDevice() || allowMobileDropdown) {
        if (scrollHeight === undefined || scrollHeight === null) {
            scrollHeight = "170";
        }
        if (sizethumb === undefined || sizethumb === null) {
            sizethumb = "auto";
        }
        var $selectWrap = selectOption.closest('.select-wrap');
        var $list = $selectWrap.find('.list');
        console.log('selectOption', selectOption);
        selectOption.selectmenu({
            appendTo: '.' + containerClass + ' .viewport .overview',
            width: width,
            maxHeight: "auto",
            create: function(event, ui) {
                $('.select-wrap .ui-selectmenu').attr('aria-live', 'polite');
            },
            open: function () {
                if ($(this).closest('.select-wrap').length && $(this).closest('.select-wrap').hasClass('disable')) {
                    return;
                }

                $('.' + containerClass + ' .l').show();
                $('.' + containerClass + ' .r').show();
                $('.' + containerClass + ' .viewport').show();
                $('.' + containerClass + ' .scrollbar').show();
                $('.' + containerClass).tinyscrollbar({
                    scroll: true,
                    size: scrollHeight,
                    sizethumb: sizethumb
                });
                $('.' + containerClass + ' .scrollbar.disable').hide();
                selectOption.closest('.select-wrap').addClass('s-open');
                if (isOperaMini()) {
                    var heightOfOneEelemet = 34;
                    var totalListHeight = ($selectWrap.find('.ui-selectmenu-menu ul li').index() + 1) * heightOfOneEelemet;
                    $list.find('.list-bottom').remove();
                    if (!$list.find('.list-bottom').length) {
                        $list.append("<div class='list-bottom' ><div class='l'></div><div class='r'></div><div class='clear'></div></div>");
                    }
                    $list.height(totalListHeight);
                    $selectWrap.find('.viewport').height(totalListHeight);
                }
            },
            change: function (event, ui) {
                if (typeof changeHandler == "function")
                    changeHandler(ui);
            },
            close: function () {
                $('.' + containerClass).tinyscrollbar({
                    scroll: false,
                    size: scrollHeight,
                    sizethumb: sizethumb
                });
                hideScrollbar(containerClass);

                selectOption.closest('.select-wrap').removeClass('s-open');
                if (isOperaMini()) {
                    selectOption.closest('.select-wrap').find('.list').height(0);
                    $selectWrap.find('.list .list-bottom').remove();
                }
            }
        });
    } else {
        $('.select-type-l, .select-type-r').hide();
    }
}

/**
 * Initialize dropdown menu.
 * @description Default Torn Dropdown with Dark-mode support
 * @param {string} selectOption - Select with options.
 * @param {string} containerClass - Dropdown list root.
 * @param {Object} customOptions - Object with options.
 * @param {number} customOptions.width - Width in pixels (desktop).
 * @todo: also take mobile/tablet as a parameter, for now, you need to give it in css
 * @param {number} customOptions.scrollHeight - Scrollable container height.
 * @param {string} customOptions.scrollbarClass - Scrollbar style class (one from scrollbar.css).
 * @param {boolean} customOptions.allowMobileDropdown - Show on mobile.
 * @param {boolean} customOptions.isDefault - Use default styles.
 * @param {boolean} customOptions.changeHandler - Custom onChange handler function.
 */
function initDropdown(selectOption, containerClass, customOptions) {
    if (!selectOption || !containerClass) {
        console.error('Some of the required params weren\'t provided');
        return;
    }

    var defaults = {
        scrollHeight: '170',
        width: '100',
        scrollbarClass: 'scrollbar-bright',
        allowMobileDropdown: false,
        isDefault: true
    }
    var options = $.extend(defaults, customOptions);
    var keysTriggerOpen = [$.ui.keyCode.ENTER, $.ui.keyCode.UP, $.ui.keyCode.DOWN, $.ui.keyCode.LEFT, $.ui.keyCode.RIGHT];
    var $selectWrap = selectOption.closest('.select-wrap');

    $selectWrap.addClass('dropdown-new');
    $selectWrap.attr('role', 'application');
    if (!$selectWrap.attr('aria-label')) {
        $selectWrap.attr('aria-label', 'Dropdown');
    }
    $selectWrap.css('width', options.width);

    if (options.isDefault) {
        $selectWrap.addClass('dropdown-default');
    }

    if (!isTouchDevice() || options.allowMobileDropdown) {
        selectOption.selectmenu({
            appendTo: '.' + containerClass,
            create: function(event, ui) {
                $selectWrap.find('.ui-selectmenu-status').attr('aria-live', 'polite');
                $('.' + containerClass).addClass('dropdown-content');

                $selectWrap.find('.ui-selectmenu').on('keydown', function(e) {
                    if (keysTriggerOpen.includes(e.which)) {
                        selectOption.selectmenu('open');
                    }
                })
            },
            open: function () {
                if ($(this).closest('.select-wrap').length && $(this).closest('.select-wrap').hasClass('disable')) {
                    return;
                }
                var $dropdownContent = $('.' + containerClass + ' .ui-selectmenu-menu-dropdown');

                $dropdownContent.addClass(options.scrollbarClass);
                $dropdownContent.css('max-height', +options.scrollHeight);
                selectOption.closest('.select-wrap').addClass('s-open');
            },
            change: function (event, ui) {
                if (typeof options.changeHandler == "function")
                    options.changeHandler(ui);
            },
            format: customOptions.format,
            close: function () {
                $selectWrap.removeClass('s-open');
            }
        });
    } else {
        selectOption.show();
    }
}

function initializeTabsDropDown(tabSelector, dropDownSelector, dropDownListSelector, dropDownWidth, activeTab) {
    var $controlTabs = $(tabSelector);

    var actTab = activeTab || 0;
    $controlTabs.tabs({active: activeTab});

    var tabControlDisabledIndexes = [];
    $controlTabs.find('.control-tabs > li').each(function (index) {
        if ($(this).hasClass('ui-state-disabled')) {
            tabControlDisabledIndexes.push(index - 1);
        }
    });

    var $controlNavList = $(dropDownSelector);
    initDropdown($controlNavList, dropDownListSelector, { width: dropDownWidth });

    function updateDropdownState(element) {
        var optionIndex = isTouchDevice() ? element.find(':selected').index() : element.parent('.select-wrap').find('.ui-selectmenu-item-selected').index();
        $controlTabs.find('a').eq(optionIndex).trigger('click');
    }

    $controlNavList.change(function () {
        updateDropdownState($(this));
    });

    var isInitForTouch = false;
    $(window).resize(function () {

        if (getBrowserWidth() <= getMaxTabletSize() && !isInitForTouch) {
            isInitForTouch = true;

            var activeTabIndex = $controlTabs.tabs("option", "active");

            $controlNavList.find('option').each(function () {
                if ($.inArray($(this).index(), tabControlDisabledIndexes) != -1) {
                    $(this).attr('disabled', 'disabled');
                }
            });

            $controlNavList.find('option').eq(activeTabIndex).attr('selected', 'selected');
            if (!isTouchDevice()) {
                $controlNavList.selectmenu();
            }
        }
        if (getBrowserWidth() > getMaxTabletSize() && isInitForTouch) {
            isInitForTouch = false;
        }
    });
}

function toggleOptionsForTinyMCE() {
    $('.mce-tinymce .mce-container-body > .mce-menubar, .mce-tinymce .mce-container-body > .mce-panel').not('.mce-edit-area').slideToggle();
    $('.mce-tinymce .mce-container-body > .mce-edit-area.mce-panel iframe').toggleClass('mce-minimized', 500, function () {
        bodyTinymceAutoHeight();
    });
}

function isLocalStorageAvailable() {
    try {
        return 'localStorage' in window && window['localStorage'] !== null;
    } catch (e) {
        return false;
    }
}

function scrollToElement(elId, delay = 500, isBottomPosition = false) {
    if (elId && $(elId).length) {
        var plainObject = (isBottomPosition)
            ? {scrollTop: $(elId).outerHeight() + $(elId).offset().top - $(window).height()}
            : {scrollTop: $(elId).offset().top};

        $('html, body').animate(plainObject, delay);
    }
}

function cleanLocalAreaContent(name) {
    var key = EDITOR_CONTENT_PREFIX + name;
    if (isLocalStorageAvailable()) {
        localStorage.removeItem(key);
        console.log(key + ' remove options')
        localStorage.removeItem(key + 'options');
    }
}

function bodyTinymceScrollDown() {
    var frameWrapper = $('.computer-frame-wrap');
    if (tinymce.activeEditor) {
        if (!frameWrapper.length) {
            var $bodyTinymce = $(tinymce.activeEditor.getBody());
            $bodyTinymce.animate({scrollTop: $bodyTinymce.height()}, {duration: 'medium', easing: 'swing'});
        }

        tinyMCE.activeEditor.focus();
    }
}

function bodyTinymceAutoHeight() {
    if (tinymce.activeEditor) {
        var $bodyTinymce = $(tinymce.activeEditor.getBody());
        var marginBody = $bodyTinymce.outerHeight(true) - $bodyTinymce.outerHeight();
        $bodyTinymce.css('min-height', $('.mce-tinymce .mce-container-body > .mce-edit-area.mce-panel iframe').height() - marginBody + 'px');
    }
}

var isTinyMCEFocusHotKeyBinded = false;

function tinyMCEFocusHotKeyBind() {
    var alt = 18;
    var insert = 45;
    var isAlt = false;
    $(document).keyup(function (e) {
        if (e.which == alt) isAlt = false;
    }).keydown(function (e) {
        if (e.which == alt) isAlt = true;
        if (e.which == insert && isAlt == true) {
            tinyMCE.activeEditor.focus();
        }
    });
}

function updateTinyMCEContent() {
    var darkPathContent = '/css/style/dark_mode/tinycustom.css';
    var lightPathContent = '/css/style/tinycustom.css';
    var pathContent = '';
    var $headTag = '';
    for (var i = 1; i < tinymce.editors.length; i++) {
        pathContent = ($('body.dark-mode').length) ? darkPathContent : lightPathContent;
        $headTag = $('#' + tinymce.EditorManager.editors[i].id + '_ifr').contents().find('head');
        console.log('TinyMCE id:', tinymce.EditorManager.editors[i].id);
        $headTag.find('link[href*="tinycustom.css"]').remove();
        $headTag.append("<link 'type=text/css' rel='stylesheet' href='" + pathContent  + "' >");
    }
}

function changeTinyMCEMode() {
    var darkPathSkin = '/js/script/lib/tinymce/skins/dark/skin.min.css';
    var lightPathSkin = '/js/script/lib/tinymce/skins/lightgray/skin.min.css';

    var linkSkin = $('link[rel=stylesheet][href="' + darkPathSkin + '"');

    updateTinyMCEContent();

    if ($('body.dark-mode').length) {
        linkSkin = $('link[rel=stylesheet][href="' + lightPathSkin + '"');
        linkSkin.attr('href', darkPathSkin);

        return true;
    }

    linkSkin.attr('href', lightPathSkin);
}

function initializeTinyMCE(onAnimateComplete, options) {
    if (isOperaMini()) {
        return;
    }
    var animateComplete = function () {
        onAnimateComplete && onAnimateComplete()
    };

    if (tinymce) {
        tinymce.baseURL = '/js/script/lib/tinymce';
    }

    tinymce.init({
        init_instance_callback: 'changeTinyMCEMode',
        max_chars: 10,
        convert_urls: false,
        // forced_root_block: 'p',
        force_br_newlines: true,
        force_p_newlines: false,
        // forced_root_block: false,
        browser_spellcheck: true,
        resize: false,
        style_formats_merge: true,
        style_formats: [{title: 'Comment HTML', icon: "code", inline: 'span', classes: 'tinymce-comment'}],
        invalid_elements: "pre",
        default_link_target: "_blank",
        verify_html: false,
        // extended_valid_elements: "a[name|href|target=_blank|title]",
        paste_preprocess: function (plugin, args) {
            //args.content += ' preprocess';
        },
        //paste_as_text: true,
        content_css: ($('body.dark-mode').length) ? "/css/style/dark_mode/tinycustom.css" : "/css/style/tinycustom.css",
        selector: 'textarea.mail-text-area, textarea.tiny-area',
        theme: "modern",
        // entity_encoding : "raw",
        //oninit: "setPlainText",
        plugins: [
            "advlist autolink link image lists customcharmap print hr pagebreak",
            "searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking",
            "save table directionality customemoticons template paste textcolor"
        ],
        toolbar: "insertfile undo redo | bold italic | alignleft aligncenter alignright alignjustify | fullscreen | link image | " +
            "bullist numlist outdent indent | customemoticons | forecolor backcolor ",
        setup: function (editor) {
            editor.on('init', function (e) {
                if (isLocalStorageAvailable()) {
                    var content = localStorage.getItem(EDITOR_CONTENT_PREFIX + editor.id);

                    var ct = '';
                    /*
                                        var userAgendContext = localStorage.getItem('applicationData');
                                        if (userAgendContext) {
                                            ct += "<p>"+userAgendContext + "</p>";
                                        }*/

                    if (content) {
                        //var ct = JSON.parse(content);
                        // if (content !== null)
                        //     ct += content.replace(ct, "");
                        ct += content.replace(ct, "");

                        if (
                            tinymce.activeEditor.getContent().length === 0 ||
                            tinymce.activeEditor.getContent() === '<p>&amp;nbsp;</p>'
                        ) {
                            tinymce.activeEditor.setContent(ct);
                        }
                        bodyTinymceScrollDown();
                    }

                    if (options && options.afterInit)
                        options.afterInit(editor);
                }

                $('.mce-tinymce .mce-container-body > .mce-menubar, .mce-tinymce .mce-container-body > .mce-panel').not('.mce-edit-area').hide();
                $('.mce-tinymce .mce-container-body > .mce-edit-area.mce-panel iframe').addClass('mce-minimized');

                $('.mce-tinymce.mce-container.mce-panel .mce-container-body > .mce-edit-area.mce-panel').find('iframe')
                    .removeAttr('title')
                    .attr('aria-label', 'Rich Text Area. Press ALT-INSERT to start writing')
                    .end()
                    .animate({
                        height: "show",
                        opacity: "show"
                    }, "fast", function () {
                        animateComplete();
                    });

                bodyTinymceAutoHeight();

                if (!isTinyMCEFocusHotKeyBinded) tinyMCEFocusHotKeyBind();


            });

            if (options && options.afterSetup)
                options.afterSetup(editor);

            editor.on('paste', function (e) {
                if (isLocalStorageAvailable()) {
                    localStorage.setItem(EDITOR_CONTENT_PREFIX + editor.id, editor.getContent());
                }
            });

            editor.on('keyup', function (e) {
                if (isLocalStorageAvailable()) {
                    localStorage.setItem(EDITOR_CONTENT_PREFIX + editor.id, editor.getContent());
                }
            });

            editor.on('change', function (e) {
                if (isLocalStorageAvailable()) {
                    localStorage.setItem(EDITOR_CONTENT_PREFIX + editor.id, e.level.content);
                }
            });

            editor.on('click', function (event) {
                if ($('.ac-search.ui-autocomplete-input').length && $('.ac-search.ui-autocomplete-input').hasClass('ui-autocomplete-input')) {
                    var acSearch = $('.content-wrapper .ac-search');
                    acSearch.removeClass('ac-focus').nextAll('.ac-focus-input').removeClass('ac-focus-input');
                    acSearch.addClass('click-on-editor');
                    acSearch.autocomplete('close');
                }
            });

        }
    });

    function setPlainText(e) {
        console.log(e);

        var ed = tinyMCE.get('elm1');

        ed.pasteAsPlainText = true;

        //adding handlers crossbrowser
        if (tinymce.isOpera || /Firefox\/2/.test(navigator.userAgent)) {
            ed.onKeyDown.add(function (ed, e) {
                if (((tinymce.isMac ? e.metaKey : e.ctrlKey) && e.keyCode == 86) || (e.shiftKey && e.keyCode == 45))
                    ed.pasteAsPlainText = true;
            });
        } else {
            ed.onPaste.addToTop(function (ed, e) {
                ed.pasteAsPlainText = true;
            });
        }
    }
}

function userSearchTypeObj(instance) {
    var isHeaderAcSearch = instance.closest('.header').length || instance.closest('.isAcSearch').length || instance.attr('data-actype');
    var indexUserSearchType = ($.cookie('userSearchType')) ? $.cookie('userSearchType') : 0;

    var $currentUserSearchType = instance.closest('form').find('.search-type').find('option').eq(indexUserSearchType);
    if(!$currentUserSearchType.length) {
        $currentUserSearchType = instance.closest('form').find('.search-type').find('option[selected]')
    }
    var dataAcType = instance.attr('data-actype');

    if (dataAcType) {
        $currentUserSearchType = $('<option>').val(dataAcType).attr('data-' + dataAcType, 1).attr('data-actype', true);
    }

    return {isHeaderAcSearch: isHeaderAcSearch, currentUserSearchType: $currentUserSearchType};
}

var iMarketSearchCache = (function (storage, limit) {
    var STORAGE_KEY_NAME = 'iMarketSearchCache';
    return {
        get: function () {
            var cache = JSON.parse(storage.getItem(STORAGE_KEY_NAME) || '[]');
            return cache.slice(0, limit);
        },
        set: function (item) {
            var list = this.get();

            list = [item].concat(list.filter(function(_) {
                return (
                    _.value !== item.value ||
                    _.value.indexOf(item.value) === -1
                );
            }));

            storage.setItem(STORAGE_KEY_NAME,JSON.stringify(list.slice(0, limit)));
            return list
        }
    }
})(localStorage, 5);

function initializeAutocompleteSearch(options) {
    var defOptions = {type: 'all', isNotLink: false };
    var opt = typeof(options) === "object" ? $.extend(defOptions, options) : defOptions;

    $('.ac-search').each(function (index) {

        var instance = $(this).attr('id') || $(this).attr('id', "ac-search-" + index).attr('id');
        var $instance = $("#" + instance);

        var userSearchType = userSearchTypeObj($instance);
        var acOptionOrder = '';

        switch (opt.type) {
            case 'friends':
                acOptionOrder = '<li id="ac-friends" class="active" data-minlength="0"><a href="#">Friends</a></li>' +
                    '<li id="ac-factions" class="" data-minlength="0"><a href="#">Faction</a></li>' +
                    '<li id="ac-company" class="" data-minlength="0"><a href="#">Company</a></li>' +
                    '<li id="ac-all" class=""><a href="#">All</a></li>';

                break;
            case 'factions':
                acOptionOrder = '<li id="ac-factions" class="active" data-minlength="0"><a href="#">Faction</a></li>' +
                    '<li id="ac-friends" class="" data-minlength="0"><a href="#">Friends</a></li>' +
                    '<li id="ac-company" class="" data-minlength="0"><a href="#">Company</a></li>' +
                    '<li id="ac-all" class=""><a href="#">All</a></li>';

                break;
            case 'company':
                acOptionOrder = '<li id="ac-company" class="active" data-minlength="0"><a href="#">Company</a></li>' +
                    '<li id="ac-friends" class="" data-minlength="0"><a href="#">Friends</a></li>' +
                    '<li id="ac-factions" class="" data-minlength="0"><a href="#">Faction</a></li>' +
                    '<li id="ac-all" class=""><a href="#">All</a></li>';

                break;
            default:
                acOptionOrder = '<li id="ac-friends" class="" data-minlength="0"><a href="#">Friends</a></li>' +
                    '<li id="ac-factions" class="" data-minlength="0"><a href="#">Faction</a></li>' +
                    '<li id="ac-company" class="" data-minlength="0"><a href="#">Company</a></li>' +
                    '<li id="ac-all" class="active"><a href="#">All</a></li>';

                break;
        }

        var acFaction = (!userSearchType.isHeaderAcSearch) ? '<ul class="ac-options">' + acOptionOrder + '</ul>' : '';

        if (!$instance.parent().hasClass('ac-wrapper')) {
            $instance.wrap('<div class="ac-wrapper"></div>');

            //todo: temporary check for header, remove after header rebuild to React
            var inHeader = !!$instance.parents('#topHeader').length;
            var scrollbarDOM = inHeader ? '<div class="viewport"></div>' : '<div class="viewport scrollbar-bright"></div>';

            $instance.after('<div class="autocomplete-wrap" id="' + instance + '-cont">' + acFaction + scrollbarDOM);
        } else {
            return;
        }

        var action = location.protocol + '//' + location.host + '/' + $instance.attr('data-action') + '.php';

        var userNotFoundMsg = (userSearchType.isHeaderAcSearch) ? userSearchType.currentUserSearchType.val() + " cannot be found" : "No person could be found";

        var enter = 13;

        var acOption = 'ac-' + opt.type;

        var $containerId = $('#' + instance + '-cont');

        Object.size = function (obj) {
            var size = 0, key;
            for (key in obj) {
                if (obj.hasOwnProperty(key)) size++;
            }

            return size;
        };

        function closeDropDown() {
            var container = $('.ui-autocomplete-input');
            var wrap = $('.autocomplete-wrap');

            if (container && container.length && container.hasClass('ac-focus')) {
                container.removeClass('ac-focus').removeClass('open');
            }

            if (wrap && wrap.length && wrap.hasClass('ac-focus-input')) {
                wrap.removeClass('ac-focus-input').removeClass('open');
                wrap.find('.ui-autocomplete').hide()
            }
        }

        function removeDropDownOnClick(e) {
            if ($(e.target).parents('.ac-wrapper').length > 0) {
                return;
            }

            closeDropDown()

            $(document).off("mousedown", removeDropDownOnClick);
        }

        $instance.autocomplete({
            appendTo: "#" + instance + "-cont .viewport",
            position: {
                of: null
            },
            create: function (event) {
                var $el = $(this);
                var isDataAcType = userSearchType.currentUserSearchType.attr('data-actype');
                var $options = $('#' + instance + '-cont.autocomplete-wrap .ac-options > li');

                $('.search-text, select.search-type').blur(function () {
                    $containerId.removeClass('ac-focus-input');
                    $instance.removeClass('ac-focus');

                    var inputData = $instance.val();
                    if (inputData) {
                        // var userData = $containerId.find('.ui-autocomplete > li:first-child > a').text().match(/(.*)\[(.*)\]/);
                        // if (userData != null && (inputData.toLowerCase() == $.trim(userData[1]).toLowerCase() || inputData == $.trim(userData[2]))) {
                        //     $instance.val($.trim(userData[0]));
                        //
                        //     if (typeof showNotification == 'function') {
                        //         showNotification(event);
                        //     }
                        //
                        // }

                        if ($instance.val().match(/(.*)\[(.*)\]/)) {
                            $instance.addClass('chosen');
                        } else {
                            $instance.removeClass('chosen');
                        }
                    }

                    if ($instance.hasClass('ui-autocomplete-input')) {
                        $instance.autocomplete("close");
                    }

                });

                $options.find('a').click(function (event) {
                    event.preventDefault();
                });

                $options.click(function (event) {

                    event.stopPropagation();
                    var $el = $(this);
                    $el.parents('.autocomplete-wrap').addClass('ac-focus-input');
                    $el.siblings().removeClass('active').end().addClass('active');
                    acOption = $el.attr('id');

                    $instance.blur();
                    if ($instance.hasClass('ui-autocomplete-input')) {
                        $instance.autocomplete("close");
                    }

                    if ($options.siblings('.active').attr('data-minlength')) {
                        $instance.autocomplete("option", "minLength", 0);
                        $instance.autocomplete("search", $instance.val());
                    } else {
                        $containerId.find('.ui-autocomplete').hide();
                        $instance.removeClass('open');
                        $containerId.removeClass('open');
                        $instance.autocomplete("option", "minLength", 1);
                        $instance.autocomplete("search", $instance.val());
                    }
                });

                function updateContainerWidth() {
                    var totalWidth = parseInt($instance.width())
                        + parseInt($instance.css('paddingLeft'))
                        + parseInt($instance.css('paddingRight'));
                    $containerId.width(totalWidth);
                    $containerId.find('.ui-autocomplete').width(totalWidth);
                }

                $instance.focus(function () {
                    var userSearchType = userSearchTypeObj($instance);
                    if(userSearchType.isHeaderAcSearch ==='imarket') {
                        $instance.autocomplete("search", "");
                    }

                    // Hiding AutoCompleteUserSearch dropdown
                    $(document).mousedown(removeDropDownOnClick)
                    $(document).keyup(function(e) {
                        if (e.key === "Escape") {
                            $containerId.removeClass('ac-focus-input');
                            $instance.removeClass('ac-focus').blur();
                            closeDropDown()
                        }
                    })

                    if (userSearchType.isHeaderAcSearch) {
                        var dataMinLength = +!(userSearchType.currentUserSearchType.attr('data-minlength'));
                        $instance.autocomplete("option", "minLength", dataMinLength);
                        $instance.autocomplete("search", "");
                        userSearchType.currentUserSearchType.attr('data-off') ? $instance.autocomplete("disable") : $instance.autocomplete("enable");

                        if (isDataAcType) {
                            updateContainerWidth();
                        }

                    } else {
                        $instance.addClass('ac-focus');
                        $containerId.css({left: $instance.css('margin-left')});
                        updateContainerWidth();
                        $containerId.addClass('ac-focus-input');
                    }
                    $(window).resize()

                });

                $(window).resize(function () {
                    updateContainerWidth();
                    var userSearchType = userSearchTypeObj($instance);
                    if (userSearchType.isHeaderAcSearch) {
                        var isMobileUserSearchType = false;
                        if (getBrowserWidth() <= getMaxTabletSize() && !isMobileUserSearchType) {
                            isMobileUserSearchType = true;
                            var indexUserSearchType = userSearchType.currentUserSearchType.index();
                            var $searchTypeRadio = $('.search-type-radio .choice-container .radio-css');
                            $searchTypeRadio.prop('checked', false);
                            $searchTypeRadio.eq(indexUserSearchType).prop('checked', true);
                        }
                        if (getBrowserWidth() > getMaxTabletSize() && isMobileUserSearchType) {
                            isMobileUserSearchType = false;
                        }
                    }
                });

            },
            select: function (event, ui) {

                if (opt.isNotLink) {
                    event.preventDefault();
                }

                var userSearchType = userSearchTypeObj($instance);
                var isDataAcType = userSearchType.currentUserSearchType.attr('data-actype');
                var isLocationDisabled = +userSearchType.currentUserSearchType.attr('data-nolocation');

                $containerId.removeClass('ac-focus-input');
                $instance.removeClass('ac-focus').blur();

                if (ui.item.value != userNotFoundMsg) {
                    $instance.val(ui.item.value);
                    $instance.addClass('chosen');
                    $instance.trigger('chosen');

                    if (typeof showNotification == 'function') {
                        showNotification(event);
                    }

                } else {
                    if (!$instance.val().match(/(.*)\[(.*)\]/)) {
                        $instance.removeClass('chosen');
                    }
                    $instance.text('');
                }
                if ($instance.hasClass('ui-autocomplete-input')) {
                    $instance.autocomplete("close");
                }

                if (userSearchType.currentUserSearchType.val() === 'imarket') {
                    iMarketSearchCache.set(ui.item);
                }

                if (userSearchType.currentUserSearchType.val() === 'places') {
                    var action = window.location.protocol + '//' + window.location.hostname + '/' + 'autocompleteHeaderAjaxAction.php';
                    $.ajax({
                        url: addRFC(action),
                        dataType: "json",
                        data: {places: ui.item.id, option: 'popularity'},
                        success: function (data) {
                        }
                    });

                    if (ui.item.value === "Points Market") {
                        $('#ac-link-' + ui.item.id).attr('href', ui.item.url + '?refresh=' + Math.floor(new Date().getTime() / 1000));
                    }
                }

                if (userSearchType.isHeaderAcSearch) {

                    if (event.which == enter && ui.item.url) {
                        window.location = ui.item.url;
                    }

                    if (isLocationDisabled) {
                        $instance.closest('form').trigger('submit');
                        return true;
                    }

                    if (isDataAcType) {
                        $('input[name=' + $instance.attr('data-actype') + 'ID]').val(ui.item.id);
                    }
                }

                return false;
            },
            source: function (request, response) {

                var userSearchType = userSearchTypeObj($instance);

                if (userSearchType.isHeaderAcSearch) {
                    acOption = userSearchType.currentUserSearchType.val();
                }
                var isLocationDisabled = +userSearchType.currentUserSearchType.attr('data-nolocation');
                var isCacheAvailable = +userSearchType.currentUserSearchType.attr('data-cache');


                var searchCache = acOption==='imarket'?iMarketSearchCache.get():[];

                $.ajax({
                    url: addRFC(action),
                    dataType: "json",
                    data: {q: request.term, option: acOption, caches: searchCache},
                    success: function (data) {
                        if (data && (Object.size(data) || data.list)) {
                            if (userSearchType.isHeaderAcSearch) {

                                var template = Handlebars.templates['search-header-template'];
                                var itemId;

                                var list;

                                if(acOption==='imarket' && request.term==='' && isCacheAvailable) {
                                    list = searchCache;
                                } else {
                                    list = $.map(data.list, function (item) {
                                        itemId = userSearchType.currentUserSearchType.attr('data-user') ? " [" + item.id + "]" : '';
                                        var tpl = template({search: data.search, list: item});
                                        return {
                                            label: tpl,
                                            value: item.name + itemId,
                                            id: item.id,
                                            url: item.url
                                        };
                                    })
                                }

                                response(list);
                            }
                            else {
                                response($.map(data, function (item) {
                                    return {
                                        label: item,
                                        value: item.name + " [" + item.id + "]",
                                        url: item.url
                                    };
                                }));
                            }
                        } else {
                            response({
                                value: userNotFoundMsg
                            });
                        }
                    }
                });
            },
            open: function () {
                $instance.addClass('open');
                $containerId.addClass('open');
                $instance.closest('form').find('.search-type').selectmenu('close');
            },
            close: function (event) {

                if (($('body').hasClass('noSelect') || $containerId.hasClass('ac-focus-input')) && event.which != enter) {
                    $containerId.find('.ui-autocomplete').show();
                } else {
                    $instance.removeClass('open');
                    $containerId.removeClass('open');
                }

                if ($instance.hasClass('click-on-editor')) {
                    if (typeof showNotification == 'function') {
                        showNotification(event);
                    }
                    $instance.removeClass('click-on-editor');
                }
            }
        });

        $.ui.autocomplete.prototype._renderItem = function (ul, item) {

            if (ul.closest('.header').length || ul.closest('.ac-wrapper').find('.ac-search').attr('data-actype')) {
                return $(item.label).data("item.autocomplete", item).appendTo(ul);
            }
            else {
                var onlineClass = (item.label == item.value) ? 'empty' : (
                    item.label.online == 'online' ? 'online' : (
                        item.label.online == 'offline' ? 'offline' : (
                            item.label.online == 'idle' ? 'away' : ''
                        )
                    )
                );
                return $("<li class='" + onlineClass + " ui-custom-item'></li>")
                    .data("item.autocomplete", item)
                    .append("<a>" + item.value + "</a>")
                    .appendTo(ul);
            }
        };

    });
}

//Find element to highlight for intro-missions
var animElement;

function highlightElement(constPath) {
    //var currenturl = window.location.pathname;
    var pathname = constPath || $(location).attr('pathname');
    var params = $(location).attr('search');
    var currenturl = pathname + params;
    $.ajax({
        type: 'GET',
        url: '/missionChecker.php',
        dataType: 'json',
        data: {currenturl: currenturl},
        success: function (data1) {
            if (!data1) return;
            stopAnimateElements();
            if (data1.elID) {
                window.highlightElementResult = data1.elID.split('.').join('').split(',');
            }
            window.highlightElementID = data1.elID;
            document.documentElement.dispatchEvent(new CustomEvent('missionCheckerResolved', { detail: { elID: data1.elID } }));
            $('[data-role="alert"]')
                .removeAttr('role')
                .removeAttr('data-role')
                .removeAttr('aria-labelledby', 'wai-mission-desc');
            if (data1.task != null) {
                if (!isObject(data1.task)) {
                    var $mission = $("#currentMissionTask"),
                        additionalMsg = "";
                    $mission.html(data1.task);

                    setTimeout(function () {
                        animateElement(data1.elID);
                    }, 1000);

                    var $elID = $(data1.elID);
                    if (data1.elID && $elID.hasClass('highlight-active')) {
                        var $el = $elID;
                        if ($el.length > 1) {
                            $el = $($el.get().reverse());
                        }

                        $mission = $el;
                        additionalMsg = "Click";
                    }

                    $mission.attr('role', 'alert')
                        .attr('data-role', 'alert')
                        .attr('aria-labelledby', 'wai-mission-desc')
                        .before('<span id="wai-mission-desc" class="wai">' +
                            'Next step of mission is ' + data1.task + '. ' + additionalMsg +
                            '</span>');
                }
                else {
                    $("#currentMissionTask").text("Visit George");
                }
            } else {
                $("#currentMissionTask").text("Visit George");
            }
        }
    });
}

function isObject(val) {
    return (typeof val === 'object');
}

//highlight intro-mission DOM element
function animateElement(el) {
    $(el).css({
        '-webkit-animation-iteration-count': 'infinite',
        'animation-iteration-count': 'infinite'
    }).addClass('highlight-active');
}

function animateElementJS(el) {
    var $el = $(el);
    var opacity = $el.css('opacity') == 1 ? 0.3 : 1;
    $el.animate(
        {opacity: opacity},
        500,
        'swing',
        function () {
            animateElementJS(el);
        }
    );
}

function animateElementCounter(el, count) {
    var iterationCount = count ? count.toString() : 'infinite';
    var $el = $(el);
    $el.css({
        '-webkit-animation-iteration-count': iterationCount,
        'animation-iteration-count': iterationCount
    })
        .addClass('highlight-active');
    $el.before($el.clone(true));
    $el.remove();
}

function stopAnimateElements($container) {
    var $wrapper = $container || $('body');
    var animatedElements = $wrapper.find('.highlight-active:not(.highlight-controlled-by-react)');
    animatedElements.removeClass('highlight-active');
}

function animateAttentionElement($element, bg, delay) {
    var delay = delay || 3000;
    var $newStatement = $element;
    $newStatement.addClass(bg);
    animateElement($newStatement);
    setTimeout(function () {
        $newStatement.removeClass(bg);
        stopAnimateElements($('.content-wrapper'));
    }, delay);
}

//pulsate intro-mission text in announcements header
function pulseElement(el) {
    $(el).closest('a').effect("bounce", "slow");
}

function deleteCookie(name) {
    document.cookie = name + "=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT";
    $.cookie(name, null, {domain: '.' + window.location.host});
}

function deleteChatsCookie() {
    deleteCookie('secret');
    deleteCookie('chat_secret');
}

function getRand(max) {
    var mirror = 0;
    //if (Math.random() > 0.5) {
    //    mirror = 180;
    //}
    return Math.random() * max + mirror;
}

function saveInitRotation(selector, x, y) {
    if (!selector.attr('data-rotateX') || !selector.attr('data-rotateY')) {
        selector.attr('data-rotateX', x).attr('data-rotateY', y);
    }
}

function changeRotation(selectors, x, y) {
    selectors.each(function () {
        var $el = $(this);
        $el.css('transform', 'perspective(1000px) rotateY(' + y + 'deg) rotateX(' + x + 'deg)');
        saveInitRotation($el, x, y);
    });
}

function setRandomRotation(selectors) {
    var max = 90,
        maxHalf = max / 2;
    selectors.each(function () {
        var $el = $(this);

        /*Decreasing rotation depends on height of container*/
        var decreasingValue = 500;
        if ($el.height() > decreasingValue) {
            max = max * decreasingValue / $el.height();
            maxHalf = max / 2;
        }

        var x = getRand(max) - maxHalf,
            y = getRand(max) - maxHalf;
        changeRotation($el, x, y);
    });
}

function updateRotation(selectors, shiftX, shiftY) {
    selectors.each(function () {
        var $el = $(this);
        changeRotation($el, parseFloat($el.attr('data-rotateX')) + shiftX, parseFloat($el.attr('data-rotateY')) + shiftY);
    });
}

function getBoxesWithTitles() {
    return $('.title-black, .title-red, .title-gray, .title-green').parent();
}

function getTorn3DSelector() {
    return $('#menu-list-accordion > li, ' +
        '.city-banner, .info-msg-cont, ' +
        '.header, .content-title, ' +
        '.content-wrapper > [class*="-wrap"]')
        .not('[class*="cont-"], [class*="title-"]');
}

function initTorn3D() {
    setRandomRotation(getBoxesWithTitles());
    setRandomRotation(getTorn3DSelector());
    setRandomRotation($('.tabs, .tab-menu-cont'));
}

function updateTorn3D(event) {
    var shift = 10,
        shiftX = event.clientX / $(this).height() * shift,
        shiftY = event.clientY / $(this).width() * shift;

    updateRotation($('[data-rotateX][data-rotateY]'), shiftX, shiftY);
}

function initTorn3DOnAJAXComplete() {
    var $contentWrapper = $('.content-wrapper');
    if ($('body').hasClass('three-dimensional') && !($contentWrapper.find('[data-rotateX][data-rotateY]').length
        || $contentWrapper.attr('data-rotateX'))) {
        setRandomRotation($contentWrapper);
    }
}

/*
 * checkHonorName function is a fix for "Bug 5566" (https://bugs.webkit.org/show_bug.cgi?id=5566).
 * If the issue will be fixed then next function should be removed.
 * */
function checkHonorName() {
    if (/chrom(e|ium)/.test(navigator.userAgent.toLowerCase())) {
        $('.user.name img').each(function () {
            var $el = $(this);
            if ($el.width() == 0) {
                $el.closest('.user.name').addClass('alt');
            }
        }).load(function () {
            $(this).closest('.user.name').removeClass('alt');
        });
    }
}

function setCookie(name, value, expires, isSecure) {
    var cookieProps = [
        name, '=', value || ''
    ];

    if (expires) {
        if (typeof expires === 'number') {
            var days = expires;
            expires = new Date();
            expires.setDate(expires.getDate() + days);
        }

        cookieProps.push('; expires=', expires.toUTCString());
    }

    if (isSecure) {
        cookieProps.push('; SameSite=None; Secure; path=/');
    }

    document.cookie = cookieProps.join('');
}

$(function () {
    highlightElement();
    initializeAutocompleteSearch();
    initializeTopPageLinks();
    initializeTooltip('.header, .menu-sections, .menu-list .icons, .menu-list .menu-info-mobile-wrapper,' +
        '.menu-list .m-account, .menu-list .m-areas, .menu-list .m-lists, .menu-list .m-specials,' +
        '.content-wrapper', 'white-tooltip');

    if ($('#frmLogin').is(":visible")) {
        deleteChatsCookie();

        if ($.cookie('three_dimensional')) {
            $.cookie('three_dimensional', false);
        }
    }

    $(window).focus(function () {
        $('.ui-tabs-active a').blur();
    });

    var $body = $('body');

    /* TODO Old April fools events
    if ($('.header').hasClass('aprils-fool')) {
        initJoke();
    }
    */

    $('.three-dimensional-switcher').click(function (event) {
        event.preventDefault();
        var threeDimensionalFlag = !$body.hasClass('three-dimensional');

        if (!$.cookie('three_dimensional')) {
            $.cookie('three_dimensional', threeDimensionalFlag, {expires: 24});
        } else {
            $.cookie('three_dimensional', threeDimensionalFlag);
        }

        location.reload();

    });

    checkHonorName();

    $('#menu-list-accordion').on('click', '.refillClick', function (e) {
        var txt = $(this).attr('data-act');
        $.get('/refill.php', {refiltype: txt}, function (data) {
            refreshTopOfSidebar();
            $.cookie('refill', JSON.stringify({energy: txt == 'e', nerve: txt == 'n'}), {expires: 18262});
            if ($(this).hasClass('energy')) {
                $('.refills-link.energy').addClass('refill-hide');
            }
            if ($(this).hasClass('nerve')) {
                $('.refills-link.nerve').addClass('refill-hide');
            }
        });
    });
});

/* TODO Old April fools events
function initJoke() {

    var aprilFools = $.parseJSON($.cookie('aprilFools'));
    if (!aprilFools) {
        var init = {
            rotation: 0,
            disappearing: 0
        };
        $.cookie("aprilFools", JSON.stringify(init), {expires: 1});
    }
    aprilFools = $.parseJSON($.cookie('aprilFools'));

    var state = {};
    if (!aprilFools.rotation) {
        if (!Math.floor(Math.random() * 10)) {
            rotation();
            state = {
                rotation: 1,
                disappearing: aprilFools.disappearing
            };
            $.cookie("aprilFools", JSON.stringify(state));
        }
    } else if (!aprilFools.disappearing) {
        if (!Math.floor(Math.random() * 10)) {
            disappearing();
            state = {
                rotation: aprilFools.rotation,
                disappearing: 1
            };
            $.cookie("aprilFools", JSON.stringify(state));
        }
    }
}


function rotation() {
    $('body').addClass('april-fools1');
}

function disappearing() {
    var collection = [];
    $('* * * * * * * * *').each(function (index) {

        collection.push($(this));
    });

    updateCollection(collection);

    setTimeout(function () {
        $('html').height('100%');
        $('body > *').hide();
    }, 60000);
}

*/

function updateCollection(collection) {
    var coll = collection;
    var itemPosition = Math.floor(Math.random() * coll.length);
    var item = coll[itemPosition];
    item.animate({
        opacity: 0
    }, 100, function () {
        coll.splice(itemPosition, 1);

        updateCollection(coll);
    });

    return true;
}

function queryStringToObj(str) {
    var queryString = {},
        str = str;
    if (str[0] == '!')
        str = str.substr(1);
    str.replace(
        new RegExp("([^\/^?=&]+)(=([^&]*))?", "g"),
        function ($0, $1, $2, $3) {
            queryString[$1] = $3;
        }
    );
    return queryString;
}

function initializeAwardsTooltip($selector) {
    $selector.tooltip({
        track: true,
        tooltipClass: "awards-tooltip",
        hide: false,
        position: {
            my: "center bottom-20",
            at: "center top",
            using: function (position, feedback) {
                var $this = $('.ui-tooltip');
                var elWidth = $this.width();
                var windowWidth = $(document).width();
                var arrowLeft;
                var boundedPos = {
                    top: position.top
                };

                if (position.left < 0) {
                    boundedPos.left = 0;
                    arrowLeft = 50 + $this.offset().left + (position.left / 2);
                    arrowLeft = arrowLeft <= 0 ? 14 : arrowLeft;
                } else if (position.left + elWidth > windowWidth) {
                    boundedPos.left = position.left - (position.left + elWidth - windowWidth);
                    arrowLeft = 50 + 100 - (boundedPos.left / position.left * 100);
                } else {
                    boundedPos.left = position.left;
                }

                $this.css(boundedPos);

                var $arrow = $this.find('.tooltip-arrow');
                $arrow
                    .removeClass('top')
                    .removeClass('bottom')
                    .addClass(feedback.vertical)
                    .addClass(feedback.horizontal)
                    .css('left', arrowLeft + '%');

                if (arrowLeft) {
                    $arrow.css('margin-left', 0);
                }
            }
        },
        open: function (event, ui) {},
        content: function () {
            var $el = $(this);
            var lockedColor = $el.attr("tooltip-color") || $(".honors-unlocked .honors-box").attr("tooltip-color") || ($(this).find('span').hasClass('locked') ? "red" : "green");
            return "<div class='tooltip-" + lockedColor + "'>" + $el.attr('title') + "</div>"
                + "<div class='tooltip-cont'>" + $el.attr('data-title').split('{br}').join('<br>') + "</div>"
                + "<div class='tooltip-arrow'></div>";
        }
    });
}

function itemInfoHandler(itemInfo, content_class) {
    if (itemInfo.find('.graphs-stock:first').length == 0)
        return;

    function chechWidth() {
        var $graphs = itemInfo.find('.graphs-stock'),
            $circ = $($graphs[1]),
            $val = $($graphs[0]),
            circ_w = 25,
            val_w = 25;

        $circ.children().each(function (index, item) {
            if (index < 3)
                circ_w += $(item).width();
        });
        if (circ_w > $circ.width() || getBrowserWidth() < getMinTabletSize())
            $circ.find('.title').text('Circ:');

        $val.children().each(function (index, item) {
            if (index < 3)
                val_w += $(item).width();
        });
        if (val_w > $val.width())
            $val.find('.title').text('Val:');
    }

    chechWidth();

    if (content_class) {
        itemInfo.find('.chart-main-wrap').addClass(content_class);
        var gridBG = '#202020';
    }
    var bookInfo = itemInfo.find('.book-info .hover');

    if (bookInfo) {
        bookInfo.colorbox({
            transition: 'none',
            href: bookInfo.data('url'),
            photo: true,
            scalePhotos: false,
            maxWidth: '100%',
            onComplete: function () {
                //$('#cboxTitle').append($(this).closest('.choice-wrap').find('.player').clone());
            }
        });
    }

    itemInfo.on('click', '.graphs-stock', function (event) {
        event.preventDefault();
        event.stopPropagation();
        var $this = $(this),
            $item_info = $this.parents('.info-content:first');
        $this.parents('.info-cont:first').children().removeClass('bold');
        $this.addClass('bold');

        $item_info.find('.tabs-wrap .tab-menu-cont').addClass('hide');

        var $chart = $item_info.find('.' + $this.attr('chart')).removeClass('hide'),
            $tab_menu_cont = $item_info.find('.' + $this.attr('chart'));

        if (!this.wasInit) {
            var itemID = $tab_menu_cont.attr('itemID');
            $item_info.find('.tabs-wrap').tabs();


            // TODO: Initialize prettyCheckable plugin only on checkboxes and radio buttons that aren't changed for JAWS support
            if (0 === $('.chart-main-wrap .without-prettycheckable').length) {
                var $pretty = $item_info.find('.tabs-wrap .' + itemID + ' .period-wrap .radio > input');
                var $prettyFirst = $item_info.find('.tabs-wrap .' + itemID + ' .period-wrap .radio > input:not(:disabled)');
                $pretty.prettyCheckable();
                $($prettyFirst[0]).prop("checked", true).parent().find("a:first").click();
            } else {
                var $periods = $item_info.find('.tabs-wrap .' + itemID + ' .period-wrap .radio > input');
                var $periodsFirst = $item_info.find('.tabs-wrap .' + itemID + ' .period-wrap .radio > input:not(:disabled)');
                $($periodsFirst[0]).prop("checked", true);
                var $secondPeriods = $('.period-wrap.ui-tabs-nav .radio');
                var $uniqueId = $($secondPeriods[0]).find('input.radio-css[id$=second]');
                if (0 === $uniqueId.length) {
                    $.map($secondPeriods, function (period) {
                        var $inputPeriod = $(period).find('.radio-css');
                        var $labelPeriod = $(period).find('.marker-css');
                        var inputIdValue = $inputPeriod.attr('id') + '-second';
                        $inputPeriod.attr('id', inputIdValue);
                        $labelPeriod.attr('for', inputIdValue);
                    });
                }
            }

            initialiseChart($item_info.find('.' + itemID + ' .chart-placeholder:last'), null, null, null, gridBG);
        }
        this.wasInit = false;   //set false to reinit graph on change graph tab
    });


    // TODO: use if prettyCheckable is initialized
    if (0 === $('.chart-main-wrap .without-prettycheckable').length) {
        itemInfo.on('click', '.period-wrap li.radio', function (event) {
            event.stopPropagation();
            event.preventDefault();
        });
    }

    itemInfo.on('change', '.period-wrap input:radio', function (event) {
        var $item = $(this).closest('li.radio');
        updateChart('.' + $item.parents('.tab-menu-cont').attr('itemID') + ' .chart-placeholder:last', false, $item.attr('action'), null, gridBG);
    });

    //TODO: added class 'light' to items on mission' graph
    if (itemInfo.closest('.rewards-wrap.dark').length > 0) {
        itemInfo.find('.period-wrap input.radio-css').addClass('light');
    }
    //itemInfo.find('.graphs-stock:first').trigger('click');

    if ($('.main-market-page .buy-item-info-wrap').length > 0) {
        if (getBrowserWidth() < getMinTabletSize()) {
            var $inputPeriods = itemInfo.find('input');
            $.map($inputPeriods, function (period) {
                var labelContent = $(period).data('label');
                if (labelContent) {
                    $(period).closest('li').find('label.marker-css').text(labelContent);
                }
            });
        }
    }

    if (!window.itemInfoWasInit) {
        $(window).resize(function () {
            chechWidth();
        });
        window.itemInfoWasInit = true;
    }

    moveWAIFocusToElement(itemInfo.find('.item-info'));
}

function getUserMoney() {
    var value = 0;

    // Gets money from sidebar DOM selector
    if ($('#user-money') && $('#user-money').data('money')) {
        var sidebarValue = $('#user-money').data('money');

        value = sidebarValue;

        // Otherwise gets money from some legacy selector(needs to be identified by it creator!)
    } else if ($('#FtcMA .m-hide') && $('#FtcMA .m-hide').html()) {
        var magicValue = $('#FtcMA .m-hide').html();

        value = parseInt(magicValue.replace(/\$/, '').replace(/,/g, ''));
    }

    return value;
}

function isOperaMini() {
    return (navigator.userAgent.indexOf('Opera Mini') > -1);
}

function twf(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (!d.getElementById(id)) {
        js = d.createElement(s);
        js.id = id;
        js.src = "//platform.twitter.com/widgets.js";
        fjs.parentNode.insertBefore(js, fjs);
    }
}


function numberFormat(num) {
    return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
}

function ieVersion() {
    var ua = window.navigator.userAgent;
    if (ua.indexOf("Trident/7.0") > 0)
        return 11;
    else if (ua.indexOf("Trident/6.0") > 0)
        return 10;
    else if (ua.indexOf("Trident/5.0") > 0)
        return 9;
    else
        return 0;  // not IE9, 10 or 11
}

function SoundBtn(element, callback) {
    this.init = function () {
        if (!element || element.length == 0) {
            console.error("SoundBtn error - no node provided");
            return;
        }
        this.on = this.getLocalValue();
        this.setState();
        var self = this;
        element.on('click', function (e) {
            e.preventDefault();
            self.on = !self.on;
            self.setLocalValue();
            self.setState();
            if (callback) callback();
        });
    };
    this.setState = function () {
        if (this.on == true || this.on == 'true') {
            element.addClass('on');
        }
        else {
            element.removeClass('on');
        }
    };
    this.getLocalValue = function () {
        var result;
        if (isLocalStorageAvailable()) {
            result = localStorage.casinoSound;
        }
        else {
            result = $.cookie('casinoSound');
        }
        return !(result == false || result == 'false');
    };
    this.setLocalValue = function () {
        if (isLocalStorageAvailable()) {
            localStorage.casinoSound = this.on;
        }
        else {
            $.cookie('casinoSound', this.on);
        }
    };
    this.init();
}

function getUserDevice() {
    var device = 'desktop';

    if (getBrowserWidth() > getMinTabletSize() && getBrowserWidth() <= getMaxTabletSize()) {
        device = 'tablet';
    }

    if (getBrowserWidth() <= getMinTabletSize()) {
        device = 'mobile';
    }

    return device;
}

function setUserDevice() {

    getAction({
        type: "post",
        action: 'devicesTypes.php',
        data: {
            step: 'setDevicesTypeStatistics',
            device: getUserDevice()
        },
        success: function (data) {
            try {
                var msg = JSON.parse(data);
                console.info(msg.text);
            }
            catch (err) {
            }
        },
        error: function () {
            console.log('Critical error!');
        }
    });
}

jQuery(function () {
    /* setUserDevice(); */
});


function getItemSizeByName(name) {
    var sizeArray = [
        {name: 'blank', width: 100, height: 50},
        {name: 'crimes_blank', width: 60, height: 30},
        {name: 'large', width: 100, height: 50},
        {name: 'large_dark', width: 100, height: 50},
        {name: 'medium', width: 60, height: 30},
        {name: 'small', width: 38, height: 19}
    ];

    return $.grep(sizeArray, function(obj){return obj.name === name;})[0]
}

window.changeItemsSizeOff = true;

function changeItemsSize($container, nameFrom, nameTo) {

    if (window.changeItemsSizeOff) {
        return false;
    }

    var size = getItemSizeByName(nameTo);

    if (size !== undefined) {

        var newItemSizeClass = 'items' + size.width + 'x' + size.height;

        $container.addClass(newItemSizeClass);

        var imageRegExp = new RegExp('(\\/images\\/items\\/\\d+\\/)?' + nameFrom + '(\\.png){1}(\\?v=\\d+)?', 'g');

        $container.find('img').each(function () {
            var $img = $(this);
            var currentSrc = $img.attr('src');
            var newSrc = currentSrc.replace(imageRegExp, function (str, $1, $2) {
                return $1 + nameTo + $2;
            });

            if (currentSrc != newSrc) {
                $img.attr('src', newSrc);
            }
        });
    }
}

// TODO Mock for April Fool's Banner Ads functionality
var getUserData = function(callback) {

};

// TODO Mock for April Fool's Banner Ads functionality
var getAFBA = function () {

};

/**
 * Retrieves recaptchas token for the server side checking.
 * action must only contain a-zA-Z and slash '/' characters.
 *
 * @example
 *
 * getRecaptchaV3Token("registration")
 *   .catch(function (error) {
 *       throw error;
 *   })
 *   .then(function (token) {
 *       paramObj[token.key] = token.value;
 *
 *       getAction({
 *           type: "post",
 *           action: homePageLink,
 *           data: paramObj,
 *       });
 *   });
 *
 * @param {string} actionName - string that describes an action, should not be nil.
 * @return Promise - then({value, key}) => {})
 */
function getRecaptchaV3Token(actionName) {
    return new Promise(function (resolve, reject) {
        resolve({});
    });
    /*
        return new Promise(function (resolve, reject) {
            if (typeof actionName !== "string" || !actionName || actionName == "action_name") {
                reject(Error('wrong action for getRecaptchaV3Token'));
            }

            grecaptcha.ready(function () {
                grecaptcha.execute('6LfkW10UAAAAADySFSJVZCrcDA0wJ37OzqHjTHxq', {action: actionName}).then(
                    function (token) {
                        if (token) {
                            resolve({value: token, key: 'g-recaptcha-v3-response'});
                        } else {
                            reject(Error('unable to retrieve a token for getRecaptchaV3Token'));
                        }
                    }
                );
            })
        });
    */
};

// function getServerTimestamp() {
//     return new Promise(function(resolve) {
//         getAction({
//             type: "get",
//             action: 'sidebarAjaxAction.php?action=servertime',
//             success: function(resp) {
//                 var data = JSON.parse(resp);
//
//                 return resolve(data);
//             }
//         })
//     })
// }
//
// function getCurrentTimestamp() {
//
// }
//
//


jQuery(function() {
    if ($.cookie('sidebarStates')) {
        var cookies = $.parseJSON($.cookie('sidebarStates'));
        if (cookies.isDesktopVersion) {
            $('body').removeClass('r')
        }
    }
});

function copyTextToClipboard(text) {
    navigator.clipboard.writeText(text);

    if (checkUserAgent("com.ionicframework.tornv2301860")) {
        NativeAndroid.copyToClipboard(text);
    }
    if (checkUserAgent("com.manuito.tornlite") || checkUserAgent("com.manuito.tornpda")) {
        window.flutter_inappwebview.callHandler('copyToClipboard', text);
    }
}

if (checkUserAgent("com.manuito.tornlite") || checkUserAgent("com.manuito.tornpda")) {
    window.addEventListener('onChangeTornMode', function (e) {
        var theme = e.detail.checked ? 'dark' : 'light';
        window.flutter_inappwebview.callHandler('webThemeChange', theme);
    })
}

function setSidebarStatesCookie(isReloadRequired) {
    var $body = $('body');
    var sidebarStates = {
        isDesktopVersion: !$body.hasClass('r'),
    };

    var sidebarStatesCookieName = 'sidebarStates';
    $.cookie(sidebarStatesCookieName, null);
    $.cookie(sidebarStatesCookieName, JSON.stringify(sidebarStates), {expires: 18262});

    var sidebarMobileStates = {
        isDesktopVersion: $body.hasClass('r') ? 'r' : '',
    };

    $.ajax({
        type: "POST",
        url: '/sidebarAjaxAction.php',
        data: {sidebarMobileStates: sidebarMobileStates},
        success: function () {
            if (isReloadRequired) {
                location.reload();
            }
        }
    });
}

function toggleDesktopMode() {
    var $body = $('body');
    $body.toggleClass('r');
    setSidebarStatesCookie(true);
    $body.empty();
}

function setJSCookie(name, value, days) {
    var expires = '';

    value = (value || value == false) ? value : '';

    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = '; expires=' + date.toUTCString();
    }
    document.cookie = name + '=' + value  + expires + '; path=/';
}

function getJSCookie(name) {
    var nameEQ = name + '=';
    var ca = document.cookie.split(';');
    for(var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) {
            return c.substring(nameEQ.length, c.length);
        }
    }
    return null;
}

function eraseJSCookie(name) {
    document.cookie = name + '=; Max-Age=-99999999;';
}


$(function () {
    let travelHomeButtonClickCounter = 0;
    $(document).on('click', '.content-title .travel-home', function (event) {
        event.preventDefault();
        travelHomeButtonClickCounter++;
        if (travelHomeButtonClickCounter % 2 == 1) {
            getAction({
                type: "post",
                action: 'travelagency.php',
                data: {
                    step: 'backHome'
                },
                success: function (str) {
                    $(".travel-home-content").html(str);
                    $(".travel-home-content").removeClass("hide").show();
                }
            });
        } else {
            $(".travel-home-content").addClass("hide").hide();
        }
    });

    $(".content-wrapper").on("click", ".travel-home-content .travel-back-link", function (event) {
        event.preventDefault();
        getAction({
            type: "post",
            action: 'travelagency.php',
            data: {step: 'backHomeAction'},
            success: function (msg) {
                $(".travel-home-content").find(".msg").html(msg);
                $(".travel-home-content").removeClass("hide");

                if (!$(msg).find('.q-wrap').is('.error')) {
                    setTimeout(function (){
                        window.location.href = "page.php?sid=travel";
                    }, 3000);
                }
            }
        });
    });

    $(".content-wrapper").on("click", ".travel-home-content .cancel", function () {
        $(".content-title a.travel-home").trigger('click');
    });
});

function userIsTravelling() {

    return $('.content-wrapper').hasClass('travelling') && !$('.computer-frame-wrap').length;
}

function preventTextSelectionOnDoubleClick(config) {
    var timerID = null;
    var invokeType = config.invokeType || 'onClick';
    var containerNode = config.containerNode || document.querySelector('.content-wrapper') || document;
    var actionNode = config.actionNode || {
        key: 'classList',
        method: 'contains',
        selector: 'btn'
    };
    var duaration = config.duaration || 300;
    var preventSelectionNode = config.preventSelectionNode || document;

    function disableUserSelect() {
        preventSelectionNode.onselectstart = function() {
            return false;
        };
    }

    function activeUserSelect() {
        preventSelectionNode.onselectstart = function() {
            return true;
        };
    }

    function addClickEvent() {
        containerNode.addEventListener('click', onClickHandler);
    }

    function removeClickEvent() {
        containerNode.removeEventListener('click', onClickHandler);
    }

    function onClickHandler(e) {
        if (e.target[actionNode.key][actionNode.method] !== actionNode.selector) {
            return;
        }

        startPreventSelection();
    }

    function erashSelectedText() {
        if (window.getSelection) {
            if (window.getSelection().empty) {  // Chrome
                window.getSelection().empty();
            } else if (window.getSelection().removeAllRanges) {  // Firefox
                window.getSelection().removeAllRanges();
            }
        } else if (document.selection) {  // IE?
            document.selection.empty();
        }
    }

    function startPreventSelection() {
        if (timerID) {
            timerID = null;
        }

        disableUserSelect();
        erashSelectedText();

        timerID = setTimeout(function() {
            activeUserSelect();
            invokeType === 'callback' && removeClickEvent();
        }, duaration);
    };

    function onClickSelectPrevention() {
        addClickEvent();
    }

    function callbackSelectPrevention() {
        startPreventSelection();
    }

    if (invokeType === 'callback') {
        callbackSelectPrevention();

        return;
    }

    onClickSelectPrevention();
};


/**
 *  @function textAreaValidator
 *  @author ruslanv
 *  @description Apply validation for max length / max linebreaks on textarea
 *
 *  @param {string} selector
 *  @param {number} maxLength
 *  @param {number} [maxLineBreaks]
 *
 *  @return {void}
 */
function textAreaValidator(selector, maxLength, maxLineBreaks) {
    if (!selector || !maxLength) return;

    $(selector).on('input', function(event) {
        var newValue = '';
        var LINE_BREAK_REGEXP = /\r?\n/;

        if (maxLineBreaks !== undefined) {
            var inputSplit = event.target.value.split(LINE_BREAK_REGEXP);

            newValue = inputSplit.length >= maxLineBreaks ? inputSplit.slice(0, maxLineBreaks).join('\n') : '';
        }

        if (event.target.value.length > maxLength) {
            newValue = inputSplit.slice(0, maxLength);
        }

        $(this).val(newValue || event.target.value);
    });
}

// TODO: Moved from Credits
var fullwidth = window.screen.availWidth;
var width = window.screen.availWidth/3;
var leftpos = fullwidth - width;
var height = window.screen.availHeight;
function win(url) {
    helpwin=window.open('','Torn Help Wiki','scrollbars=yes,toolbar=no,resizeable=no,status=no,width='+width+',height='+height+',top=0,left='+leftpos+',directores=no');
    helpwin.location.href = url;
}

var isEnabledGlobalDarkMode = false;

$(document).ready(function () {

    /* ToDo Fix for FF browser: https://github.com/torncity/torn/issues/5870 */
    var htmlStyle = $('html').prop('style');
    htmlStyle.removeProperty("background-color");

    /* ToDo Fix: https://github.com/torncity/torn/issues/6003 */
    $('.travel-agency-travelling .stage').css('opacity', 1);

    $body = $('body');

    /* ToDo Fix for FF browser: https://github.com/torncity/torn/issues/5870 */
    $body.prop('style').removeProperty("background");

    // ToDo: quick fix for WAI buttons

    $body.on('submit', 'form', function (event) {
        var isReCaptcha = $(this).find('.btn-wrap .torn-btn[name!="reCaptcha"]').length;
        var isSubmitButton = !$(this).find('.btn-wrap .torn-btn').hasClass('submit-btn');
        var isEditor = $(this).find('button').length;

        if (isReCaptcha && isEditor && isSubmitButton) {
            event.preventDefault();
            event.stopPropagation();
        }
    });

    // ToDo: quick fix for WAI buttons
    $body.on('click', '.btn-wrap.disable .torn-btn', function (event) {
        event.preventDefault();
    });

    $body.on('click', '.torn-btn:disabled', function (event) {
        event.preventDefault();
    });

    // ToDo: quick fix for WAI links
    $body.on('click', 'a[href="#"].wai-support', function (event) {
        event.preventDefault();
    });

    $('[data-wai-label]').each(function() {
        var ariaLabel = $(this).attr('aria-label') || '';
        if (this.textContent) {
            $(this).attr('aria-label', ariaLabel + ' ' + this.textContent.replace(/\s+/g, ' '));
        }
    });

    /**
     *  @function optimizeUserIconsTooltipsForTouchscreens
     *  @author ruslanv
     *  @description Adds possibility to trigger user icon tooltip on touchscreens
     *
     *  @returns {void}
     */
    function optimizeUserIconsTooltipsForTouchscreens() {
        function iOSVersion() {
            if (/iP(hone|od|ad)/.test(navigator.platform)) {
                var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
                return [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)];
            }
        }
        // tooltips work as it should on Apple devices with version less than 13, ignore them
        if (iOSVersion() && iOSVersion()[0] < 13) return;

        var iconsSelector = '.big [id^="icon"] a, .med [id^="icon"] a, .sml [id^="icon"] a';
        var clickedIcon;

        $(document).on('click', iconsSelector, function (e) {
            if (!isTouchDevice()) return;

            if (this !== clickedIcon) {
                e.preventDefault();
                clickedIcon = this;
            }
        })
    }

    optimizeUserIconsTooltipsForTouchscreens();

    isEnabledGlobalDarkMode = $('body').hasClass('dark-mode');

    $('body').on('change', '#dark-mode-state', function () {
        // TODO Dark mode logging
        $.ajax({
            type: "POST",
            url: 'index.php?action=setUserDM',
            data: { darkModeEnabled: $.cookie('darkModeEnabled') },
            success: function (data) {
                var resp = JSON.parse(data);
                console.log(resp.msg);
            }
        });
    });

    //isolatedNativeScroll('.scrollbar-bright');
});

function isInputNameInvalid({ name, regex }) {
    if (!regex) {
        regex = /[^A-Za-z0-9\-\_!?€£#$%&\[\](){}*‘’+',.\/@=\^~:;| ]+/;
    }

    if (!name || !name.length) {
        return false;
    }

    var reg = new RegExp(regex, 'gim');

    return reg.test(name);
}

function isInputTextInvalid({ name, regex }) {
    if (!regex) {
        regex = /[^A-Za-z0-9\-\_!?€£#$%&\[\](){}*+',.\/@=\^~:;|\n|\r ]+/;
    }

    if (!name || !name.length) {
        return false;
    }

    var reg = new RegExp(regex, 'gim');

    return reg.test(name);
}

function checkUserAgent(userAgentName) {
    var userAgent = window.navigator.userAgent;

    return userAgent && userAgent.indexOf(userAgentName) > -1
}

function isTornMobileApp() {
    return checkUserAgent("com.ionicframework.tornv2301860") || checkUserAgent("com.manuito.tornlite")
}

function setWAITimer($timerSelector, timeout = 60000) {

    if ($timerSelector.length) {

        $timerSelector.attr('aria-live', 'off');
        $timerSelector.attr('role', 'timer');

        setInterval(function ($timerSelector) {

            setTimeout(function ($timerSelector) {
                $timerSelector.attr('aria-live', 'off');
            }, 1000, $timerSelector);

            $timerSelector.attr('aria-live', 'polite');

        }, timeout, $timerSelector);
    }

}

function moveWAIFocusToElement($selectorTo) {
    $selectorTo.focus();
}

function postFormData(path, params, method) {
    method = method || "post";
    var form = document.createElement("form");
    form.setAttribute("method", method);
    form.setAttribute("action", path);

    for (var key in params) {
        if (params.hasOwnProperty(key)) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", key);
            hiddenField.setAttribute("value", params[key]);

            form.appendChild(hiddenField);
        }
    }

    document.body.appendChild(form);
    form.submit();
}

(function waiTimerManager() {
    setInterval(function () {
        $('.hasCountdown:not([aria-live])').each(function () {
            setWAITimer($(this));
        });
    }, 10000);
})();

function addWebsocketEventListeners(events = [{namespace: '', action: '', callback: function () {}}]) {

    const eventListeners = (!Array.isArray(events)) ? [events] : events;

    for (const eventListener of eventListeners) {

        if (typeof eventListener.callback === 'function') {
            WebsocketHandler.addEventListener(eventListener.namespace, eventListener.action, eventListener.callback());
        }

        if (typeof eventListener.callback === 'string') {
            switch (eventListener.callback) {
                case 'reload':
                    WebsocketHandler.addEventListener(eventListener.namespace, eventListener.action, function () {
                        window.location.reload();
                    });
                    break;
            }
        }
    }
}

function reloadPageDefaultEvents() {
    addWebsocketEventListeners(
        [
            { namespace: 'traveling', action: 'updateTravelState', callback: 'reload' },
            { namespace: 'sidebar', action: 'onHospital', callback: 'reload' },
            { namespace: 'sidebar', action: 'onJail', callback: 'reload' },
        ]
    );
}

jQuery.fn.extend({
    waisortable: function(options) {
        this.sortable(options);

        var $list = $(this).find('>li');

        var keyCodeUp = 38,
            keyCodeDown = 40,
            keyCodePageUp = 33,
            keyCodePageDown = 34;

        $($list, this).attr('tabindex', 0).bind('keydown', function(event) {

            if (event.which === keyCodeUp || event.which === keyCodeDown || event.which === keyCodePageUp || event.which === keyCodePageDown) {

                if (event.which === keyCodeUp) {
                    $(this).insertBefore($(this).prev());
                }

                if (event.which === keyCodeDown) {
                    $(this).insertAfter($(this).next());
                }

                if (event.which === keyCodePageUp) {
                    $(this).parent().prepend($(this));
                }

                if (event.which === keyCodePageDown) {
                    $(this).parent().append($(this));
                }

                $(this).focus();
            }
        });
    }
});

