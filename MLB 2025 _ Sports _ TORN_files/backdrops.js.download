window.addEventListener('DOMContentLoaded', function () {
  /** @type {{ el: HTMLElement, rect: DOMRectReadOnly }} */
  const headerRoot = { el: document.getElementById('header-root'), rect: null };
  /** @type {{ el: HTMLElement, rect: DOMRectReadOnly }} */
  const sidebarRoot = { el: document.getElementById('sidebarroot'), rect: null };

  const backdropsWrapper = document.querySelector('.backdrops-container');

  let totalHeaderHeight = 0;

  /**
   * Toggle the `fixed` class as the user scrolls past the header+navbar (on) or back up again (off).
   * This class anchors the backgrounds to the top of the screen and stops them scrolling.
   *
   * We use `fixed` instead of `sticky` because sticky causes problems with the page height, allowing to scroll
   * past the end of the content even on short pages where being able to do that makes no sense at all.
   */
  if (backdropsWrapper) {
    window.addEventListener('scroll', function () {
      const useFixed = window.scrollY > totalHeaderHeight;
      backdropsWrapper.classList.toggle('fixed', useFixed);
    });
  }

  /**
   * Repositions the background wrapper such that it begins where the header + horizontal menu (=sidebar) ends.
   */
  function updateTotalHeaderHeight() {
    if (!headerRoot.rect || !sidebarRoot.rect) return;

    const isSidebarHorizontal = sidebarRoot.rect.width > sidebarRoot.rect.height;
    totalHeaderHeight = headerRoot.rect.height + (isSidebarHorizontal ? sidebarRoot.rect.height : 0);

    if (backdropsWrapper) {
      backdropsWrapper.style.top = totalHeaderHeight + 'px';
    }
  }

  // Respond to size-changes of header and sidebar elements, repositioning the background elements as needed.
  if (headerRoot.el && sidebarRoot.el) {
    new ResizeObserver(function (entries) {
      headerRoot.rect = entries[0].contentRect;
      updateTotalHeaderHeight();
    }).observe(headerRoot.el);

    new ResizeObserver(function (entries) {
      sidebarRoot.rect = entries[0].contentRect;
      updateTotalHeaderHeight();
    }).observe(sidebarRoot.el);
  }
});
